[{"title":"【FineBI】调研文档","url":"/2021/10/26/finebi/","content":"\nFineBI问题：\n\n1. 排序问题\n\n","tags":["Records","BI","FineBI"],"categories":["DS"]},{"title":"【SQL-Leetcode】刷题记录-困难","url":"/2021/10/23/sql-16/","content":"\n为了刷力扣特意充了年费会员，400元真是太贵了呜呜呜\n\n刷题单：\n\n<img src=\"./刷题单1.png\" alt=\"递归\" style=\"zoom:50%;display:inline-block\"/>\n\n<img src=\"./刷题单2.png\" alt=\"递归\" style=\"zoom:50%;display:inline-block\"/>\n\n刷题过程中发现leetcode好像不能通过create生成表，只能用with as生成临时表，sad= 。 =\n\n今天学习到了一个新方法！！\n\n## 使用WITH RECURSIVE递归生成连续变量临时表\n\n如果有需求是需要补全数据的话，也就是在原数据表中不存在但是仍需在结果表中呈现该字段的时候，可以自己制作一个连续的临时表用来补全不连续的字段\n\n```sql\nWITH RECURSIVE d AS (\nselect 0 as n,1 as fact\nUNION ALL\nSELECT n+1, (n+1)*fact FROM d WHERE n < 7\n)\n```\n\n## 10-23进度&总结\n\n目前完成了11道题，进展有点缓慢= 。 =\n\n总结了一下在调试中出现错误的原因：\n\n1. 总是忘记维度，比如经常做着做着就忘记了这个度量值应该在哪个维度下统计或是join的时候要思考好久on后的条件（归根结底，脑子太笨了）\n2. 去重与不去重的情况一定要想清楚\n3. 一些结果为null的值没有及时做处理\n4. 自连接后一定要先排除自己和自己相连的行信息\n\n今天的全场最佳题目：[2004. The Number of Seniors and Juniors to Join the Company](https://leetcode-cn.com/problems/the-number-of-seniors-and-juniors-to-join-the-company/)\n\n个人认为是比较新颖的~\n\n总结一些小技巧：\n\n1. 递归生成连续变量的临时表\n2. 笛卡尔积生成一个全信息表，作为左表用来实现补全数据的功能\n3. 针对固定范围内统计（比如三天内，三个月内等等）生成辅助列，通过join between合并后进行聚合计算；如果需要统计一共连续了多久可以用row_number打行号的方式来做\n4. 可以通过if(first_value(if(xxx=a,1,0)) over(...)=1,..,..)在原表中打标记来实现在规定范围内只要出现1个a，那么该范围内所有都打上标记/接收/排除的情况\n5. 排除某种情况除了可以where xx not in(select ...)方法之外，还可以left join两张表（待排除/接收的为右表），筛选条件为右表同字段is null/is not null，其实接收情况直接用inner join就可以\n\n## 10-24进度&总结\n\n全场最佳：[571. 给定数字的频率查询中位数](https://leetcode-cn.com/problems/find-median-given-frequency-of-numbers/)\n\n一开始只要找总数+1/2距离各项累计数最近的即可，后来发现没有这么简单= 。 =\n\n最麻烦：[1384. 按年度列出销售总额](https://leetcode-cn.com/problems/total-sales-amount-by-year/)\n\n这道题的判断逻辑花了好久才弄明白（脑子短路ing）\n\n错误的原因：\n\n1. over(partition by a order by b) 默认rows范围是在分区a按b排序下的**unbounded preceding 到 current row**\n\n   over(partition by a) 默认rows范围是在分区a下的**unbounded preceding 到 unbounded following**\n\n   over(order by a) 默认rows范围是在b排序下的**unbounded preceding 到 current row**\n\n   这导致下列两个语句：\n\n   last_value() over(order by xx)\n\n   first_value() over(order by xx desc) \n\n   的结果是不一样的，first_value中unbounded preceding 到 current row可以保证选到第一行，但是last_value不能保证选到最后一行，下界是到当前行\n\n2. union默认是union distinct\n\n## 10-25进度&总结\n\n全场最佳：[618. 学生地理信息报告](https://leetcode-cn.com/problems/students-report-by-geography/)\n\n一直在思考怎么把所有值顶上去忽略null值，最后看了评论区大佬的答案恍然大悟，解决方法是根据排序打上行号，根据行号来group，在各大洲同个排序号下的就可以放到一行\n\n掌握recursive财富密码的题目：[1767. 寻找没有被执行的任务对](https://leetcode-cn.com/problems/find-the-subtasks-that-did-not-execute/)\n\n递归的层级结构类似这样：\n\n<img src=\"./递归示意图.jpeg\" alt=\"递归\" style=\"zoom:50%;display:inline-block\"/>\n\n","tags":["SQL","Leetcode","Recorde"],"categories":["DS"]},{"title":"【PM】B/C端产品设计思维的区别","url":"/2021/10/19/b-duan-he-c-duan-chan-pin-qu-bie/","content":"\n## 一、设计起点与重点\n\nB端产品的重心应该放在对企业客户的业务内容、行业前景和战略布局进行调研；\n\nC端产品的重心则是同类型竞品调研、市场调研以及流量价值预估\n\n其实都是进行需求调研的，但是调研的目的与重点不一样\n\n## 二、设计目的\n\nB端产品由于主要面向企业客户，那么**解决痛点、优化管理和提升效率**则是设计的目的，整个产品偏向功能化，个人认为相应PM的门槛会较高，一般要求PM有多年相关产品使用经验（清楚基本业务流程），并且以有一定的相关管理岗工作经验为佳（这样才会对整个业务流程更加熟悉，踩过坑后才更容易从细节中设计出好的产品）\n\nC端产品PM入门门槛相对较低，相比起B端，更注重PM具有发散性思维、富有创意，主要的目的是**流量获取与变现**\n\n相对来说B端产品DIY情况更多\n\n## 三、目标客户\n\nB端产品由于主要面向企业客户，这决定了客户的**专业性、稳定性与统一性**\n\nC端产品由于主要面向“你我他”这样的客户，这决定了客户的**个性化、变化性与多样性**\n\n用大白话说就是，B端客户对产品质量敏感度更高，且用户粘性会更高，用户变化性与流动性低，而C端相反\n\n## 四、指标体系与盈利模式\n\n### 1、指标体系搭建\n\n搭建指标体系结构：\n\n1. 明确业务关注内容与优化目标\n2. 将目标拆解为各个功能模块，每个模块下进行指标筛选\n3. 与研发侧沟通判断数据获取的可行性\n4. 确立各个查看维度与度量值，实现多维分析功能\n5. 确认项目排期\n6. 项目跟进\n7. 跟进用户反馈，确定指标体系是否对指导目标有用\n8. 补充数据预警机制，定位指标异动原因（拆解核心指标）\n\n### 2、盈利模式\n\nB端的盈利目标为“提高用户粘性，长期盈利”，所以盈利来源主要聚焦于企业支付的订阅费、购买费、服务费等等（经常性收入订阅）\n\nC端的盈利目标为“提升转化率，争取流量变现”，所以盈利来源主要聚焦于吸引流量后进行营销/老客户（杀熟）\n\nSaaS客户的成功就是SaaS业务的成功\n\n","tags":["PM","Notes"],"categories":["PM"]},{"title":"【ML】Regression Model","url":"/2021/10/11/ml-1/","content":"\n最近发现了一个讲MAE与MSE损失函数选择的文章：\n\n[如何选择回归损失：MAE还是MSE？](https://www.codenong.com/cs105811405/)\n\n其中有句话\n\n> MAE存在一个严重的问题（特别是对于神经网络）：**更新的梯度始终相同**，也就是说，即使对于很小的损失值，梯度也很大。这样不利于模型的学习。为了解决这个缺陷，我们可以使用变化的学习率，在损失接近最小值时降低学习率。而MSE在这种情况下的表现就很好，即便使用固定的学习率也可以有效收敛。**MSE损失的梯度随损失增大而增大，而损失趋于0时则会减小**。这使得在训练结束时，使用MSE模型的结果会更精确。\n\n推导了一下梯度更新的式子，理解到了MSE自动调整更新步长的含义：\n\n<img src=\"./推导过程.jpeg\" alt=\"推导过程\" style=\"zoom:50%;display:inline-block\"/>\n","tags":["Notes","Machine Learning"],"categories":["DS"]},{"title":"【Stat 110-Probability】Theme 11","url":"/2021/09/04/stat-11/","content":"\n补充以下剩下的资料：\n\n![](notes30.jpg)\n\n![](notes31-32.jpg)\n\n![](notes33-34.jpg)\n\n![](sp-8-1.jpg)\n\n![](sp-8-2.jpg)\n","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【Google Ads】展示广告系列","url":"/2021/08/16/google-ads-1/","content":"\n#### 每种 Google Ads 广告系列类型都可以帮助您达成您的特有业务目标。我们来看几个例子：\n\n- **展示广告系列**：在用户在线浏览感兴趣的内容时提升品牌认知度。\n- **购物广告系列**：宣传您的产品，分享您的产品目录详情以及为您的网店或实体店增加流量或客流量。\n- **搜索广告系列**：在用户搜索类似产品或服务时吸引他们在您的网站上采取行动。\n- **视频广告系列**：大规模覆盖您的目标受众群体，将您企业的故事生动道来。\n\n#### 了解投放到 Google 展示广告网络的两种广告系列类型\n\n##### 智能型展示广告系列\n\n1. 只需提供预算、出价和广告素材资源这三种内容，即可在几分钟内完成广告系列的制作。随后，系统会借助多种 Google 机器学习技术持续优化广告系列，为您招揽尽可能多的客户。\n2. 您会收到所有 Google Ads 标准报告，此外还能获得一些根据数据分析生成的新型补充性报告，以便您开展着眼全局的战略性管理，而非事无巨细的日常管理。\n3. 智能型展示广告系列的投放范围涵盖 Google 展示广告网络上的三百万网站和应用，包括 AdMob 以及 Google 自有自营的各款产品和服务（如 YouTube）。\n\n##### 标准展示广告系列\n\n1. 充分掌控展示广告系列的方方面面。\n2. 手动选择定位条件、出价和广告格式。\n\n智能型展示广告系列实现了完全自动化，标准展示广告系列则让您拥有更大的控制力。\n\n#### 采用 Google 展示广告来网罗用户\n\n","tags":["Notes","Marketing","Advertising"],"categories":["Business"]},{"title":"【Tableau】Case Studies & Notes","url":"/2021/08/09/tableau-1/","content":"工作过程中主要使用tableau来做可视化报表，希望尽快能熟悉起来～～\n## 忽略筛选器的计算\n\n在Tableau上写的计算字段一般会根据筛选器进行实时计算，如果想忽略筛选器的限制的话，可以使用fixed方法，例如计算GMV占比，需要计算一个当天全平台GMV的值（分母）：\n```sql\n{FIXED [Prc_Date] : SUM([Usd Total])}\n```\n虽然筛选器下有各个维度，但是该计算字段将实现只看当天的总GMV，在fixed后加入需要focus的维度，就可以只根据这些维度进行计算\n\n## 实现条件格式\n\n最近想在tableau上实现类似excel里条件格式的功能，如下图：\n\n<img src=\"./效果.jpg\" alt=\"效果\" style=\"zoom:50%;display:inline-block\"/>\n\n- 首先需要创建计算字段，分别为<0，>0，=0的情况，使其返回一个字符“▼”，“▲”和“=”\n- 随后将三个计算字段添加到标签，在标签内容中，对其设置不同的颜色\n\n|         步骤一          |         步骤二          |\n| :---------------------: | :---------------------: |\n| ![步骤一](./步骤一.png) | ![步骤二](./步骤二.png) |\n\n## 分析中的默认计算方式为去重计算\n\n<img src=\"./参考.png\" alt=\"效果\" style=\"zoom:50%;display:inline-block\"/>\n\n若需要计算不去重的结果，只能新增计算字段，使用avg、median等函数来计算\n\n## 设置参数达到筛选视图（工作簿）功能\n\n通过添加参数后添加计算字段来实现，[参考网址](https://www.jianshu.com/p/3cf41307ebe4)\n\n## 行标签重复&扩展维度下进行排序\n\n解决绑定维度后不能在全局范围内进行排序的问题，需要将维度合并起来，这样既实现“重复行标签”又能实现“忽略维度，度量值全局排序”的问题\n\n官方教程：https://kb.tableau.com/articles/howto/displaying-row-labels-for-each-row?lang=zh-cn\n","tags":["Records","Tableau","BI"],"categories":["DS"]},{"title":"【SQL-BigQuery】Case Studies & Notes(updating)","url":"/2021/08/04/sql-15/","content":"Hive QL的那篇暂时不更2333，因为现在工作的公司不用Hive，主要使用云数据库BigQuery～\n\n## SQL语句执行顺序\n\n这个本该在第一天学sql的时候就更新的，结果到现在才开始试图理清这个关系，正在自我反省中~\n\n```sql\n-- 源自知乎https://zhuanlan.zhihu.com/p/77847158\n(8) SELECT (9)DISTINCT<Select_list>\n(1) FROM <left_table> (3) <join_type>JOIN<right_table>\n(2) ON<join_condition>\n(4) WHERE<where_condition>\n(5) GROUP BY<group_by_list>\n(6) WITH {CUBE|ROLLUP}\n(7) HAVING<having_condtion>\n(10) ORDER BY<order_by_list>\n(11) LIMIT<limit_number>\n```\n\n## SQL优化\n\n[参考网址](https://database.51cto.com/art/202008/623584.htm)\n\n|      核心思想      |          常用方法           |\n| :----------------: | :-------------------------: |\n|   最大化利用索引   |        减少数据访问         |\n| 尽可能避免全表扫描 |       返回更少的数据        |\n| 减少无效数据的查询 | 减少交互次数（批量DML操作） |\n|                    |     减少服务器 CPU 开销     |\n|                    | 利用更多资源（使用表分区）  |\n\n### 查询索引失效情况\n\n1. **避免字段开头模糊查询**，如果开头一定要使用模糊查询，可以尝试使用判断是否包含子串的instr函数\n2. **避免使用 in 和 not in**，可以使用exists或者between and来代替\n3. **避免使用 or**，可以使用union代替\n4. **避免进行 null 值的判断**\n5. **避免在 where 条件中等号的左侧进行表达式、函数操作**，比如time=和date(time)=，一个是靠索引一个走全表\n6. **数据量大时，避免使用 where 1=1 的条件**\n7. **索引列查询条件避免使用 <> 或者 !=**\n8. **where 条件仅包含复合索引非前置列**，例如联合索引包含 key_part1，key_part2，key_part3 三列，但 SQL 语句没有包含索引前置列\"key_part1\"，按照 MySQL 联合索引的最左匹配原则，不会走联合索引\n9. **隐式类型转换造成不使用索引**，例如索引列是varchar类型，但是判断写成=123，这样不会走索引\n10. **order by 条件要与 where 中条件一致**，否则 order by 不会利用索引进行排序，单纯order by不会走索引\n\n### 查询条件优化\n\n1. **复杂查询，使用中间临时表暂存数据**\n2. **优化 group by 语句**\n3. **优化 join 语句**，使用join来代替子查询，因为join不需要在内存中创建临时表\n4. **优化 union 查询**，除非确实要消除重复行，否则建议使用union all，因为union默认distinct，会对整个临时表的数据做唯一性校验，这样做的消耗很高\n5. **拆分复杂 SQL 为多个小 SQL，避免大事务**\n6. **使用 truncate 代替 delete**\n7. **使用合理的分页方式以提高分页效率**\n\n### 建表优化\n\n1. 在表中建立索引，优先考虑 where、order by 使用到的字段\n2. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销\n3. 查询数据量大的表会造成查询缓慢，主要的原因是扫描行数过多，可以通过程序，分段分页进行查询，循环遍历，将结果合并处理进行展示\n4. 用 varchar/nvarchar 代替 char/nchar，因为变长字段存储空间小\n\n### DML优化\n\n1. **批量插入数据**\n2. **适当使用 commit**，可以释放事务占用的资源而减少消耗\n3. **避免重复查询更新的数据**\n4. **查询优先还是更新(insert、update、delete)优先**\n\n### 其他优化\n\n1. **避免select ***\n2. **避免出现不确定结果的函数**，例如now()、rand()、sysdate()、current_user()使用可能会导致数据不一致，专门针对与迁移数据库或者复制数据库的情况\n3. **多表关联查询时，小表在前，大表在后**，因为from后表关联查询是从左至右的，第一张表会涉及到全表扫描\n4. **使用表的别名**，减少解析的时间并减少哪些友列名歧义引起的语法错误\n5. **where 字句替换having 字句**，where是在group之前的操作，可以通过where限制group by操作的记录数目\n6. **调整 where 字句中的连接顺序**，mysql是从左往右，自上而下的顺序解析 where 子句。根据这个原理，应将过滤数据多的条件往前放，最快速度缩小结果集\n\n## unnest 数组转行\n\n目前的数据结构主要使用数组+结构体键值对(key,value)的形式，即数组元素是键值对，一贯先使用\n```sql\nleft join unnest(properties) p \n```\n然后使用\n```sql\nMAX(IF(p.key = 'xxx',CONCAT(ifnull(p.string_value,''),ifnull(CAST(p.int_value AS string),''),ifnull(CAST(p.float_value AS string),''),ifnull(CAST(p.bool_value AS string),'')),NULL))\n```\n返回null表示没有这个键/字段，返回''表示这个键/字段为null\n同理，如果是需要取某个满足特定条件的字段值，可以使用if或者case when，但不能直接group by这个结果，因为其他字段会变成null，应该使用max(if(...))来实现这个功能\n\n## cast 强制类型转换\n\nnull转成任意类型后的值仍为null\n\n## concat 字符串拼接函数\n\nconcat里任意一个值为null，结果均为null，可以利用这个函数来**绑定维度**，用于去重统计或是group by功能\n\n## 补全无日期记录的数据\n\n目前业务的需求是需要查看每天的情况，如果当日数据库没有任何记录，普通状况下当天的日期值是缺失的，导致图像会不连续，现在需要补全全部日期，使那些原本无当日记录的数据与上次有记录的数据对齐= 。 =\n\n目前的做法是需要创建一个有连续日期的表格，使得待补充的数据表与之进行关联，比如统计累计进行中活动的话可以通过\n\n```sql\nall_day >= 活动开始时间 and all_day <= 活动结束时间\n```\n\n来将所有活动的日期补全，使在活动周期内的**每天都有该记录**\n\n## unpivot函数，将列融成行（列转行）\n\n```sql\nSELECT sales,quarter FROM `表名`\nUNPIVOT(sales FOR quarter IN (\n    string_field_0,string_field_1,string_field_2,string_field_3\n))\n-- 将含有括号内列出的列数据的字段命名为sales，而含有列名的字段命名为quarter\n```\n\n## pivot函数，行转列\n\n与上述功能相反\n\n## lag/lead函数跳过指定值的方法（求距离当前最近时间的不为某指定值的字段）\n\n思路是可以使用lead和lag分别获得上一个/下一个非空值，oracle中的函数可以使用参数ignore nulls，但是BQ貌似不支持，主要思路：\n\n<img src=\"./图片2.png\" alt=\"图片2\" style=\"zoom:50%;\" />\n\n贴上代码：\n\n```sql\nwith data0 as (\nselect 1 as value,date(datetime(current_timestamp(),'Asia/Shanghai')) as date,'a' as id\nunion all\nselect null as value,date(datetime(current_timestamp(),'Asia/Shanghai'))-1 as date,'a' as id\nunion all\nselect 2 as value,date(datetime(current_timestamp(),'Asia/Shanghai'))-2 as date,'a' as id\nunion all\nselect null as value,date(datetime(current_timestamp(),'Asia/Shanghai'))-3 as date,'a' as id\nunion all\nselect null as value,date(datetime(current_timestamp(),'Asia/Shanghai'))-4 as date,'a' as id\nunion all\nselect null as value,date(datetime(current_timestamp(),'Asia/Shanghai'))-5 as date,'a' as id\nunion all\nselect 6 as value,date(datetime(current_timestamp(),'Asia/Shanghai'))-6 as date,'a' as id\nunion all \nselect 1 as value,date(datetime(current_timestamp(),'Asia/Shanghai'))-6 as date,'b' as id\nunion all \nselect null as value,date(datetime(current_timestamp(),'Asia/Shanghai'))-5 as date,'b' as id\nunion all \nselect null as value,date(datetime(current_timestamp(),'Asia/Shanghai'))-4 as date,'b' as id\nunion all \nselect 2 as value,date(datetime(current_timestamp(),'Asia/Shanghai'))-3 as date,'b' as id\n)\n\nselect \nvalue,\ndate,\nid,\nmax(date) over(partition by id,desc_is_null_no) nextday,\nmin(date) over(partition by id,asc_is_null_no) lastday,\ndate_diff(max(date) over(partition by id,desc_is_null_no),date,day) to_nextday,\ndate_diff(date,min(date) over(partition by id,asc_is_null_no),day) to_lastday,\nasc_is_not_null_no,\nasc_is_null_no,\nasc_all_no,\nmax(value) over(partition by id,asc_is_null_no) asc_buquan,\ndesc_is_not_null_no,\ndesc_is_null_no,\ndesc_all_no,\nmax(value) over(partition by id,desc_is_null_no) desc_buquan,\nif(date_diff(max(date) over(partition by id,desc_is_null_no),date,day) < date_diff(date,min(date) over(partition by id,asc_is_null_no),day),\nmax(value) over(partition by id,desc_is_null_no),\nmax(value) over(partition by id,asc_is_null_no)) value2\nfrom\n(\nselect \n*,\nif(value is null,\nrow_number() over(partition by id order by date) - row_number() over(partition by id,if(value is not null,1,0) order by date)\n,row_number() over(partition by id,if(value is not null,1,0) order by date)) asc_is_null_no,\nrow_number() over(partition by id,if(value is not null,1,0) order by date) asc_is_not_null_no,\nrow_number() over(partition by id order by date) asc_all_no,\nif(value is null,\nrow_number() over(partition by id order by date desc) - row_number() over(partition by id,if(value is not null,1,0) order by date desc)\n,row_number() over(partition by id,if(value is not null,1,0) order by date desc)) desc_is_null_no,\nrow_number() over(partition by id,if(value is not null,1,0) order by date desc) desc_is_not_null_no,\nrow_number() over(partition by id order by date desc) desc_all_no,\nfrom data0 \n)\norder by id,date\n```\n","tags":["Records","SQL","BigQuery"],"categories":["DS"]},{"title":"【SQL-Hive】Case Studies & Notes","url":"/2021/03/29/sql-14/","content":"主要是工作中写Hive QL积累的一些经验= 。 =\n### 窗口函数\n#### 利用Frame子句进行滚动计和\n如果说需要针对每个商品统计滚动统计过去一周的总销量，可以在frame子句中指定分区范围：\n```sql\npartition by [partition clause]\norder by [order clause]\nrows between [frame_start] and [frame_end]\n```\n### 聚合函数\n#### 字符串拼接函数\nMySQL里的聚合字符串拼接函数是group_concat，但是hive里面好像不能用，得用另一种方法来代替这个函数：\n```sql\ngroup_concat([distinct] 连接字段 [order by 排序字段 asc/desc ] [separator 分隔符])\n=\nconcat_ws(',', collect_set(cast(连接字段 as string)))\n```\n1. 因为concat_ws必须是字符串类型，所以需要用cast转换一下。\n2. collect相关函数是将分组后的某列转成数组返回，collect_set作用是把group by后的非分组字段**去重**'收集'起来，而collect_list是**不去重**的。\n#### 求分位数函数\n```sql\npercentile_approx(col,p)\ncol为待求列，p为分位数，p=2表示求二分位数\n```\n#### 多维分析子句\n##### grouping sets\n个人认为是group by的优化版本，grouping sets里面只能是group by的字段，适合多维统计，实际上就是在原来group by的结构中的增加了\"全部\"字段\n```sql\ngroup by 一般是到最细粒度，grouping sets允许group by字段的任意组合，如果group by字段未出现，则统一为'null'值\ngrouping sets(...)\n```\n##### with cube\n```sql\ngroup by a,b,c with cube\n=\ngroup by a,b,c grouping sets ((a,b,c),(a,b),(b,c),(a,c),(c),())\n```\n##### with rollup\n```sql\ngroup by a,b,c with rollup\n=\ngroup by a,b,c grouping sets((a,b,c),(a,b),(a),())\n```\n### 时间函数\n#### next_day\n```sql\nnext_day(date,weekday)\nweekday可以是'MONDAY','TUESDAY'...\n比如周内数据汇总到周一那天，则可以用：\ngroup by next_day(date_sub(dt,7),'MON')\n```\n#### 日期加减法\n```sql\n在hive中是用date_sub/date_add(dt,8)表示\n```","tags":["Records","SQL","Hive"],"categories":["DS"]},{"title":"【SQL-BEGTUT】Window functions-Summary","url":"/2021/03/03/sql-13/","content":"这几天终于在成都安顿下来了，总算有时间开始整理一下了...\n主要通过[BEGTUT](https://www.begtut.com/)网站进行学（zhao）习（chao）的\n\n## 窗口函数的通用形式\n```\nwindow_function_name(expression)\n    over (\n        [partition_definition]\n        [order_definition]\n        [frame_definition]\n    )\n```\n首先是窗口函数名称以及表达式(应用列)，over里面分别是分区定义，顺序定义和帧定义\n- partition_clause\n```\npartition by <expression>[{,<expression>...}]\n```\n负责将结果集分成块，函数在分区内执行，每次跨越分区时都会初始化\n\n- order_by_clause\n```\norder by <expression> [asc|desc], [{,<expression>...}]\n```\n指定在块中的排序方式\n\n- frame_clause\n```\nframe_unit {<frame_start>|<frame_between>}\n```\n帧单位指定当前行和帧行之间的关系类型。它可以是rows或range。当前行和帧行的偏移量是行号，如果帧单位是rows行值，则行值是帧单位range。\n *frame_start*和*frame_between*定义帧边界\n *frame_start*的值可以是：\n **unbounded preceding：**frame从分区的第一行开始。\n **n preceding：**第一个当前行之前的物理N行，N可以是文字数字或计算结果的表达式。\n **current row：**当前计算的行\n *frame_between*用法：\n```\nbetween frame_boundary_1 and frame_boundary_2\n```\nframe_boundary_1和frame_boundary_2可以是：\n **frame_start：**如前所述。\n **unbounded following：**框架结束于分区的最后一行。\n **n following：**当前行之后的物理N行。\n\n## Summary\n名称 | 描述\n:----:  | :----:\n[CUME_DIST](https://www.begtut.com/mysql/mysql-cume_dist-function.html)\t| 计算一组值中值的累积分布。\n[PERCENT_RANK](https://www.begtut.com/mysql/mysql-percent_rank-function/) | 计算分区或结果集中行的百分位数\n[DENSE_RANK](https://www.begtut.com/mysql/mysql-dense_rank-function/) | 根据ORDER BY子句为其分区中的每一行分配一个排名。 它为具有相同值的行分配相同的排名。 如果两行或更多行具有相同的等级，则排序值序列中将没有间隙。\n[RANK](https://www.begtut.com/mysql/mysql-rank-function/) | 与DENSE_RANK（）函数类似，只是当两行或更多行具有相同的排名时，排序值序列中存在间隙。\n[ROW_NUMBER](https://www.begtut.com/mysql/mysql-row_number-function/) | 为其分区中的每一行分配一个连续整数\n[FIRST_VALUE](https://www.begtut.com/mysql/mysql-first_value-function/)\t| 返回指定表达式相对于窗口框架中第一行的值。\n[LAG](https://www.begtut.com/mysql/mysql-lag-function/) | 返回分区中当前行之前的第N行的值。 如果不存在前一行，则返回NULL。\n[LEAD](https://www.begtut.com/mysql/mysql-lead-function/) | 返回分区中当前行之后的第N行的值。 如果不存在后续行，则返回NULL。\n[LAST_VALUE](https://www.begtut.com/mysql/mysql-last_value-function/) | 返回指定表达式相对于窗口框架中最后一行的值。\n[NTH_VALUE](https://www.begtut.com/mysql/mysql-nth_value-function/) | 返回窗口框架第N行的参数值\n[NTILE](https://www.begtut.com/mysql/mysql-ntile-function/) | 将每个窗口分区的行分配到指定数量的已排名组中。\n","tags":["Notes","SQL","BEGTUT","MySQL"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-9+.COVID 19","url":"/2021/02/18/sql-12/","content":"这一章也是讲窗口函数，主要是LAG\n## Window LAG\n```\n1.The example uses a WHERE clause to show the cases in 'Italy' in March.\nModify the query to show data from Spain\n\nSELECT name, DAY(whn),\n confirmed, deaths, recovered\n FROM covid\nWHERE name = 'Spain'\nAND MONTH(whn) = 3\nORDER BY whn\n```\n```\n2.The LAG function is used to show data from the preceding row or the table. When lining up rows the data is partitioned by country name and ordered by the data whn. That means that only data from Italy is considered.\nModify the query to show confirmed for the day before.\n\nSELECT name, DAY(whn), confirmed,\n   LAG(confirmed, 1) OVER (PARTITION BY name ORDER BY whn)\n FROM covid\nWHERE name = 'Italy'\nAND MONTH(whn) = 3\nORDER BY whn\n```\n```\n3.The number of confirmed case is cumulative - but we can use LAG to recover the number of new cases reported for each day.\nShow the number of new cases for each day, for Italy, for March.\n\nSELECT name, DAY(whn), confirmed - LAG(confirmed, 1) OVER (PARTITION BY name ORDER BY whn)\n FROM covid\nWHERE name = 'Italy'\nAND MONTH(whn) = 3\nORDER BY whn\n```\n```\n4.The data gathered are necessarily estimates and are inaccurate. However by taking a longer time span we can mitigate some of the effects.\nYou can filter the data to view only Monday's figures WHERE WEEKDAY(whn) = 0.\nShow the number of new cases in Italy for each week - show Monday only.\n\nSELECT name, DATE_FORMAT(whn,'%Y-%m-%d'), confirmed-LAG(confirmed, 1) OVER (PARTITION BY name ORDER BY whn)\n FROM covid\nWHERE name = 'Italy'\nAND WEEKDAY(whn) = 0\nORDER BY whn\n```\n```\n5.You can JOIN a table using DATE arithmetic. This will give different results if data is missing.\nShow the number of new cases in Italy for each week - show Monday only.\nIn the sample query we JOIN this week tw with last week lw using the DATE_ADD function.\n\nSELECT tw.name, DATE_FORMAT(tw.whn,'%Y-%m-%d'), \n tw.confirmed - lw.confirmed\n FROM covid tw LEFT JOIN covid lw ON \n  DATE_ADD(lw.whn, INTERVAL 1 WEEK) = tw.whn\n   AND tw.name=lw.name\nWHERE tw.name = 'Italy' and WEEKDAY(tw.whn) = 0\nORDER BY tw.whn\n```\n```\n6.Include the ranking for the number of deaths in the table.\n\nSELECT \n   name,\n   confirmed,\n   RANK() OVER (ORDER BY confirmed DESC) rc,\n   deaths,\n   RANK() OVER (ORDER BY deaths DESC) rc1\n  FROM covid\nWHERE whn = '2020-04-20'\nORDER BY confirmed DESC\n```\n```\n7.The query shown includes a JOIN t the world table so we can access the total population of each country and calculate infection rates (in cases per 100,000).\nShow the infect rate ranking for each country. Only include countries with a population of at least 10 million.\n\nSELECT \n   world.name,\n   ROUND(100000*confirmed/population,0)as infect_rate,\n   RANK() OVER(ORDER BY infect_rate) \n  FROM covid JOIN world ON covid.name=world.name\nWHERE whn = '2020-04-20' AND population > 10000000\nORDER BY population DESC\n\n感觉答案好像出错了，不正常...\n```\n```\n8.For each country that has had at last 1000 new cases in a single day, show the date of the peak number of new cases.\n\nselect table1.name,DATE_FORMAT(table1.whn,'%Y-%m-%d'),table1.c1 from\n  (select newcases.name,newcases.whn,\n          rank() over(partition by name order by c1 desc)as rk,newcases.c1 from \n          (select name,whn,\n                  (confirmed-lag(confirmed,1) over(partition by name order by whn))as c1\n          from covid\n          )as newcases\n  )as table1\nwhere table1.rk = 1 and table1.c1 >= 1000\norder by table1.whn\n\n气抖冷，其实跟答案是一样的但是顺序不一样，一直排不出来答案的顺序害\n感觉有一个问题是题目要求at least，应该是筛选出每天的新增数都要大于1000的国家，那应该是min<=1000，又突然发现第一天可能是null，于是乎排除掉有null的行，结果出错了，不晓得为啥...\n```\n## Summary\n- 这次主要是LAG函数，貌似跟之前接触过的LEAD函数很像，改天一定好好整理下窗口函数= 。 =","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】References","url":"/2021/02/18/sql-11/","content":"References里主要是一些其他用法指令，像个手册一样\n[1.SELECT](https://sqlzoo.net/wiki/SELECT_Reference)\n[2.CREATE and DROP](https://sqlzoo.net/wiki/CREATE_and_DROP_Reference)\n[3.INSERT and DELETE](https://sqlzoo.net/wiki/INSERT_and_DELETE_Reference)\n[4.DATE and TIME](https://sqlzoo.net/wiki/DATE_and_TIME_Reference)\n[5.Functions](https://sqlzoo.net/wiki/Functions_Reference)\n[6.Users](https://sqlzoo.net/wiki/Users_Reference)\n[7.Meta Data](https://sqlzoo.net/wiki/Meta_Data_Reference)\n[8.SQL Hacks](https://sqlzoo.net/wiki/Hacks_Reference)\n[9.Using SQL with PHP on Amazon EC2 servers](https://sqlzoo.net/wiki/SQL_with_PHP)\n[10.An introduction to transactions](https://sqlzoo.net/wiki/Transactions)\n[11.Using SQL with C#](https://sqlzoo.net/wiki/SQL_with_CS)","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-9-.Window functions","url":"/2021/02/16/sql-10/","content":"## Window functions\n![ge.png](https://i.loli.net/2021/02/18/YWo5sbNHyLwpB9M.png)\n```\n1.Show the lastName, party and votes for the constituency 'S14000024' in 2017.\n\nSELECT lastName, party, votes\n  FROM ge\n WHERE constituency = 'S14000024' AND yr = 2017\nORDER BY votes DESC\n```\n```\n2.Show the party and RANK for constituency S14000024 in 2017. List the output by party\n\nSELECT party, votes,\n       RANK() OVER (ORDER BY votes DESC) as posn\n  FROM ge\n WHERE constituency = 'S14000024' AND yr = 2017\nORDER BY party\n```\n```\n3.Use PARTITION to show the ranking of each party in S14000021 in each year. Include yr, party, votes and ranking (the party with the most votes is 1).\n\nSELECT yr,party, votes,\n      RANK() OVER (PARTITION BY yr ORDER BY votes DESC) as posn\n  FROM ge\n WHERE constituency = 'S14000021'\nORDER BY party,yr\n```\n```\n4.Use PARTITION BY constituency to show the ranking of each party in Edinburgh in 2017. Order your results so the winners are shown first, then ordered by constituency.\n\nselect constituency,party,votes,\n rank() over(partition by constituency order by votes desc) as posn from ge\nwhere yr = 2017 and constituency between 'S14000021' and 'S14000026'\norder by posn,constituency\n```\n```\n5.Show the parties that won for each Edinburgh constituency in 2017.\n\nselect within select:\n\nselect constituency,party from \n(select constituency,party,votes,\n rank() over(partition by constituency order by votes desc) as posn from ge\nwhere yr = 2017 and constituency between 'S14000021' and 'S14000026' \norder by posn,constituency)as ge1\nwhere ge1.posn = 1\n\n提取每组最值的另一个方法是group by分组条件后，先执行聚合函数max后\n```\n```\n6.Show how many seats for each party in Scotland in 2017.\n\nselect ge1.party,count(*) from \n(select party,\n rank() over(partition by constituency order by votes desc) as posn from ge\n where constituency like 'S%' and yr = 2017\n)as ge1\nwhere ge1.posn = 1\ngroup by ge1.party\n\n终于看懂这道题想表达啥意思了，不太了解选举制度所有半天没有理解'seats'是啥意思，原来是说每个选区得票数最多的政党会拿到这个选区的位置，然后统计每个政党到底拿了多少个位置。再思考如果有个政党没有拿到如果位置的话（虽然可能概率挺小），所以需要后面right join地区内所有政党，就像这样：\n\nselect party2.party,party2.seats from\n(\n select ge1.party,count(*) from \n (select party,\n  rank() over(partition by constituency order by votes desc) as posn from ge\n  where constituency like 'S%' and yr = 2017\n )as ge1\n where ge1.posn = 1\n group by ge1.party\n)as party2\nright join\n(\nselect distinct party from ge where constituency like 'S%' and yr = 2017\n)as party1\non (party1.party=party2.party)\nwhere party2.party is not null\n\n需要最后排除掉party是null的情况\n```\n## Summary\n- 窗口函数不错子，之后还要深入学习，之后再专门做个窗口函数的笔记吧...","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-9.Self JOIN","url":"/2021/02/15/sql-9/","content":"## Self join/zh\n![Edinburgh.png](https://i.loli.net/2021/02/15/dcxSergpF12RLjh.png)\n```\n1.數據庫中有多少個站stops。\nselect count(id) from stops\n```\n```\n2.找出車站'Craiglockhart'的id\nselect id from stops\nwhere name = 'Craiglockhart'\n```\n```\n3.列出巴士公司'LRT'的'4'號巴士線的站編號id和站名name\nselect id,name from route join stops on (id=stop)\nwhere company = 'LRT' and num = '4'\n```\n```\n4.以下查詢列出途經 London Road (149) 或 Craiglockhart (53)的巴士線號碼。注意有兩條路線會經過這兩個站兩次。 加入 HAVING 語句來限制只列出這兩條路線。\nSELECT company, num, count(stop)\nFROM route WHERE stop=149 OR stop=53\nGROUP BY company, num\nHAVING count(stop) = 2\n```\n```\n5.執行自我合拼來，留意b.stop代表由Craiglockhart出發不用轉車可前住的地方。 修改它來顯示由Craiglockhart到 London Road的服務資料。\nSELECT a.company, a.num, a.stop, b.stop\nFROM route a JOIN route b ON\n  (a.company=b.company AND a.num=b.num)\nWHERE a.stop=53 and b.stop=149\n```\n```\n6.此題和上題相似，但是用兩個stops表來自我合拼。這樣我們可以用站名而非站編號。 修改它來顯示由Craiglockhart到 London Road的服務資料。 如你太悶，可試一試由 'Fairmilehead' 到 'Tollcross' (系統會當答錯的。正確有3條路線:11,15,315)\nSELECT a.company, a.num, stopa.name, stopb.name\nFROM route a JOIN route b ON\n  (a.company=b.company AND a.num=b.num)\n  JOIN stops stopa ON (a.stop=stopa.id)\n  JOIN stops stopb ON (b.stop=stopb.id)\nWHERE stopa.name='Craiglockhart' and stopb.name='London Road'\n```\n```\n7.列出連接115 和 137 ('Haymarket' 和 'Leith') 的公司名和路線號碼。不要重覆。\nselect distinct a.company,a.num\nfrom route a join route b on (a.company=b.company and a.num=b.num)\nwhere a.stop = 115 and b.stop = 137\n```\n```\n8.列出連接車站stops 'Craiglockhart' 到 'Tollcross' 的公司名和路線號碼。\nSELECT a.company, a.num\nFROM route a JOIN route b ON\n  (a.company=b.company AND a.num=b.num)\n  JOIN stops stopa ON (a.stop=stopa.id)\n  JOIN stops stopb ON (b.stop=stopb.id)\nWHERE stopa.name='Craiglockhart' and stopb.name='Tollcross'\n```\n```\n9.不重覆列出可以由 'Craiglockhart' 乘一程車到達的站stops，包括'Craiglockhart'本身。 列出站名，公司名和路線號碼。\nSELECT stopb.name,a.company,a.num\nFROM route a JOIN route b ON\n  (a.company=b.company AND a.num=b.num)\n  JOIN stops stopa ON (a.stop=stopa.id)\n  JOIN stops stopb ON (b.stop=stopb.id)\nWHERE stopa.name='Craiglockhart'\n```\n```\n10.Find the routes involving two buses that can go from Craiglockhart to Lochend.\nShow the bus no. and company for the first bus, the name of the stop for the transfer,\nand the bus no. and company for the second bus.\n\n根据Hint的方法(先Craiglockhart->transfer,再从transfer->Lochend,最后join on 中转站相等)\nselect distinct first.num,first.company,name,second.num,second.company from\n(select a.num,a.company,b.stop\n from route a join route b on (a.num=b.num and a.company=b.company and a.stop!=b.stop)\n              join stops stopa on (stopa.id=a.stop)\n where stopa.name = 'Craiglockhart')as first\njoin\n(select c.num,c.company,c.stop\n from route c join route d on (c.num=d.num and c.company=d.company and c.stop!=d.stop)\n              join stops stopd on (stopd.id=d.stop)\n where stopd.name = 'Lochend')as second\non first.stop=second.stop\njoin stops on (stops.id=first.stop)\norder by first.num,name,second.num\n\n直接疯狂join,最后得到的就是'起始点-中转站-目的地'的表\nselect distinct a.num,a.company,stopb.name,d.num,d.company\nfrom route a join route b on (a.num=b.num and a.company=b.company and a.stop!=b.stop)\n             join route c on (b.stop=c.stop)\n             join route d on (c.num=d.num and c.company=d.company and c.stop!=d.stop)\n             join stops stopa on (stopa.id=a.stop)\n             join stops stopb on (stopb.id=b.stop)\n             join stops stopd on (stopd.id=d.stop)\nwhere stopa.name = 'Craiglockhart' and stopd.name = 'Lochend'\norder by a.num,name,d.num\n```\n## Quiz\n1.Select the code that would show it is possible to get from Craiglockhart to Haymarket\n**Answer：**\n```\nSELECT DISTINCT a.name, b.name\n  FROM stops a JOIN route z ON a.id=z.stop\n  JOIN route y ON y.num = z.num\n  JOIN stops b ON y.stop=b.id\n WHERE a.name='Craiglockhart' AND b.name ='Haymarket'\n```\n2.Select the code that shows the stops that are on route.num '2A' which can be reached with one bus from Haymarket?\n**Answer：**\n```\nSELECT S2.id, S2.name, R2.company, R2.num\n  FROM stops S1, stops S2, route R1, route R2\n WHERE S1.name='Haymarket' AND S1.id=R1.stop\n   AND R1.company=R2.company AND R1.num=R2.num\n   AND R2.stop=S2.id AND R2.num='2A'\n```\n3.Select the code that shows the services available from Tollcross?\n**Answer：**\n```\nSELECT a.company, a.num, stopa.name, stopb.name\n  FROM route a JOIN route b ON (a.company=b.company AND a.num=b.num)\n  JOIN stops stopa ON (a.stop=stopa.id)\n  JOIN stops stopb ON (b.stop=stopb.id)\n WHERE stopa.name='Tollcross'\n```\n## Summary\n- Self JOIN有点像自身做笛卡尔积\n- 本例数据库的route表Self JOIN的难点主要在于是on(num,company)还是on(stop)，详情可见[Using a self join](https://sqlzoo.net/wiki/Using_a_self_join)链接\n **on(num,company):**\n 同公司，同编号车可到达的站情况\n The result is a list of all pairs of stops which share a service.\n  **on(stop):**\n 同站里可到达的车情况\n The result is a list of all pairs of services which share a stop.","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-8.Using NULL","url":"/2021/02/14/sql-8/","content":"## Using Null/zh\n![9LH_JU_@_GC_ZCIBGA_J__F.png](https://i.loli.net/2021/02/14/6RoDNsmydMYZVkC.png)\n```\n1.列出學系department是NULL值的老師。\nselect name from teacher\nwhere dept is null\n```\n```\n2.注意INNER JOIN 不理會沒有學系的老師及沒有老師的學系。\nSELECT teacher.name, dept.name\n FROM teacher INNER JOIN dept\n           ON (teacher.dept=dept.id)\n```\n```\n3.使用不同的JOIN(外連接)，來列出全部老師。\nselect teacher.name,\n case when dept.name is null then null \n      else dept.name end \nfrom teacher left join dept on (teacher.dept=dept.id)\n```\n```\n4.使用不同的JOIN(外連接)，來列出全部學系。\nselect case when teacher.name is null then null else teacher.name end,dept.name\nfrom dept left join teacher on (teacher.dept=dept.id)\n```\n```\n5.Use COALESCE to print the mobile number. Use the number '07986 444 2266' if there is no number given. Show teacher name and mobile number or '07986 444 2266'\n\nselect name,coalesce(mobile,'07986 444 2266')\nfrom teacher\n```\n```\n6.Use the COALESCE function and a LEFT JOIN to print the teacher name and department name. Use the string 'None' where there is no department.\n\nselect teacher.name,coalesce(dept.name,'None')\nfrom teacher left join dept on (teacher.dept=dept.id)\n```\n```\n7.使用COUNT來數算老師和流動電話數目。\nselect count(name),count(mobile) from teacher\n```\n```\n8.使用COUNT 和 GROUP BY dept.name來顯示每一學系的老師數目。 使用 RIGHT JOIN 以確保工程系Engineering 是在當中。\nselect dept.name,count(teacher.id)\nfrom teacher right join dept on (teacher.dept=dept.id)\ngroup by dept.name\n```\n```\n9.Use CASE to show the name of each teacher followed by 'Sci' if the teacher is in dept 1 or 2 and 'Art' otherwise.\n\nselect teacher.name,\n case when dept.id = 1 or dept.id = 2 then 'Sci'\n      else 'Art' \n end\nfrom teacher left join dept on (teacher.dept=dept.id)\n```\n```\n10.Use CASE to show the name of each teacher followed by 'Sci' if the teacher is in dept 1 or 2, show 'Art' if the teacher's dept is 3 and 'None' otherwise.\n\nselect teacher.name,\n case when dept.id = 1 or dept.id = 2 then 'Sci'\n      when dept.id = 3 then 'Art'\n      else 'None'\n end\nfrom teacher left join dept on (teacher.dept=dept.id)\n```\n## Scottish Parliament/zh\n![_6BKA0RGE_MX__6_F58_J_7.png](https://i.loli.net/2021/02/14/sCaIqcAu5tQPxDg.png)\n```\n1.一個成員被工黨逐出黨，現沒屬任何黨。找出他。\nselect name from msp\nwhere party is null\n```\n```\n2.列出每個黨及其領導人。\nselect name,leader from party\n```\n```\n3.列出每個黨及其領導人，這些黨其實是沒有領導人的。\nselect name,leader from party\nwhere leader is not null\n```\n```\n4.列出政黨名單，當中最少有一名黨員在議會內。\nselect party.name\nfrom party left join msp on (msp.party=party.code)\ngroup by party.code,party.name\nhaving count(msp.name) >= 1\n```\n```\n5.列出議會成員的名單，如有所屬政黨，一同列出。確保 Canavan MSP, Dennis 是在名單中。 按msp.name順序排列。\nselect msp.name,party.name\nfrom msp left join party on (msp.party=party.code)\norder by msp.name\n```\n```\n6.列出議會中每一政黨的黨員人數。\nselect party.name,count(msp.name)\nfrom party inner join msp on (msp.party=party.code)\ngroup by party.code,party.name\n```\n```\n7.列出每一政黨的議會中黨員人數，包括沒有黨員在議會中的政黨。\nselect party.name,count(msp.name)\nfrom party left join msp on (msp.party=party.code)\ngroup by party.code,party.name\n```\n## Quiz\n![QF_F6S_Y3X___MO_E7YT_RG.png](https://i.loli.net/2021/02/14/cdFlsQSketbHwvx.png)\n1.Select the code which uses an outer join correctly.\n**Answer：**\n```\n SELECT teacher.name, dept.name FROM teacher LEFT OUTER JOIN dept ON (teacher.dept = dept.id)\n```\n2.Select the correct statement that shows the name of department which employs Cutflower\n**Answer：**\n```\n SELECT dept.name FROM teacher JOIN dept ON (dept.id = teacher.dept) WHERE teacher.name = 'Cutflower'\n```\n3.Select out of following the code which uses a JOIN to show a list of all the departments and number of employed teachers\n**Answer：**\n```\n SELECT dept.name, COUNT(teacher.name) FROM teacher RIGHT JOIN dept ON dept.id = teacher.dept GROUP BY dept.name\n```\n4.Using SELECT name, dept, COALESCE(dept, 0) AS result FROM teacher on teacher table will:\n**Answer：**\n```\ndisplay 0 in result column for all teachers without department\n```\n5.Query:\n```\nSELECT name,\n       CASE WHEN phone = 2752 THEN 'two'\n            WHEN phone = 2753 THEN 'three'\n            WHEN phone = 2754 THEN 'four'\n            END AS digit\n  FROM teacher\n```\nshows following 'digit':\n**Answer：**\n```\n'four' for Throd\n```\n6.Select the result that would be obtained from the following code:\n```\n SELECT name, \n      CASE \n       WHEN dept \n        IN (1) \n        THEN 'Computing' \n       ELSE 'Other' \n      END \n  FROM teacher\n```\n**Answer：**\n![JBN2P9HB5AW_VWH_9O97WWR.png](https://i.loli.net/2021/02/14/eODiK19XuYcl2nt.png)\n## Summary\n- 图源自[菜鸟教程](https://www.runoob.com/sql/sql-join.html)\n![sql-join.png](https://i.loli.net/2021/02/12/OEb6fnrHqUAPpXI.png)\n- **coalesce(x,y,...)** 函数：返回第一个不是空的值，用于重置空值，也可以用**case**函数完成，例如coalesce(NULL,NULL,X)的返回值是x","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-7.More JOIN","url":"/2021/02/13/sql-7/","content":"## More JOIN operations/zh\n![more join.png](https://i.loli.net/2021/02/13/YEdrHTDycuWI8ZO.png)\n```\n1.列出1962年首影的電影，[顯示 id, title]\nSELECT id,title\n FROM movie\n WHERE yr=1962\n```\n```\n2.電影大國民'Citizen Kane'的首影年份。\nselect yr from movie\nwhere title = 'Citizen Kane'\n```\n```\n3.列出全部Star Trek星空奇遇記系列的電影，包括id, title和yr(此系統電影都以Star Trek為電影名稱的開首)。按年份順序排列。\nselect id,title,yr from movie\nwhere title like 'Star Trek%'\norder by yr\n```\n```\n4.id是11768, 11955, 21191的電影是什麼名稱?\nselect title from movie\nwhere id in (11768,11955,21191)\n```\n```\n5.女演員'Glenn Close'的編號 id是什麼?\nselect id from actor\nwhere name = 'Glenn Close'\n```\n```\n6.電影北非諜影'Casablanca'的編號id是什麼?\nselect id from movie\nwhere title = 'Casablanca'\n```\n```\n7.列出電影北非諜影'Casablanca'的演員名單。\nselect name from actor join casting on (actor.id=actorid)\n                       join movie on (movie.id=movieid)\nwhere title = 'Casablanca'\n```\n```\n8.顯示電影異型'Alien'的演員清單。\nselect name from actor join casting on (actor.id=actorid)\n                       join movie on (movie.id=movieid)\nwhere title = 'Alien'\n```\n```\n9.列出演員夏里遜福'Harrison Ford'曾演出的電影。\nselect title from actor join casting on (actor.id=actorid)\n                       join movie on (movie.id=movieid)\nwhere name = 'Harrison Ford'\n```\n```\n10.列出演員夏里遜福'Harrison Ford'曾演出的電影，但他不是第1主角。\nselect title from actor join casting on (actor.id=actorid)\n                       join movie on (movie.id=movieid)\nwhere name = 'Harrison Ford' and ord != 1\n```\n```\n11.列出1962年首影的電影及它的第1主角。\nselect title,name from actor join casting on (actor.id=actorid)\n                       join movie on (movie.id=movieid)\nwhere yr = 1962 and ord = 1\n```\n**More Difficult**\n```\n12.尊·特拉華達'John Travolta'最忙是哪一年? 顯示年份和該年的電影數目。\nSELECT yr,COUNT(title) FROM\n  movie JOIN casting ON movie.id=movieid\n         JOIN actor   ON actorid=actor.id\nwhere name='John Travolta'\nGROUP BY yr\nHAVING COUNT(title)=(SELECT MAX(c) FROM\n(SELECT yr,COUNT(title) AS c FROM\n   movie JOIN casting ON movie.id=movieid\n         JOIN actor   ON actorid=actor.id\n where name='John Travolta'\n GROUP BY yr) AS t\n)\n```\n```\n13.列出演員茱莉·安德絲'Julie Andrews'曾參與的電影名稱及其第1主角。\nselect title,name from \n actor join casting on (actor.id=actorid)\n       join movie on (movie.id=movieid)\nwhere ord = 1 and movieid in \n(select movieid from \n actor join casting on (actor.id=actorid)\n       join movie on (movie.id=movieid)\n where name = 'Julie Andrews')\n\n应该用movieid而不用title，因为title可能会重复\n```\n```\n14.列出按字母順序，列出哪一演員曾作30次第1主角。\nselect name from actor join casting on (actor.id=actorid)\nwhere ord = 1\ngroup by actorid,name\nhaving count(movieid) >= 30\norder by name\n```\n```\n15.列出1978年首影的電影名稱及角色數目，按此數目由多至少排列。\nselect title,count(actorid) from casting join movie on (movie.id=movieid)\nwhere yr = 1978\ngroup by movieid,title\norder by count(actorid) desc\n\n英文版最后的排序条件还会加上title，中文版一直通不过...\n```\n```\n16.列出曾與演員亞特·葛芬柯'Art Garfunkel'合作過的演員姓名。\nselect name from\n actor join casting on (actor.id=actorid)\nwhere name != 'Art Garfunkel' and movieid in\n(select movieid from\n actor join casting on (actor.id=actorid)\n where name = 'Art Garfunkel')\n```\n## Quiz\n1.Select the statement which lists the unfortunate directors of the movies which have caused financial loses (gross < budget)\n**Answer：**\n```\nSELECT name\n  FROM actor INNER JOIN movie ON actor.id = director\n WHERE gross < budget\n```\n2.Select the correct example of JOINing three tables\n**Answer：**\n```\nSELECT *\n  FROM actor JOIN casting ON actor.id = actorid\n  JOIN movie ON movie.id = movieid\n```\n3.Select the statement that shows the list of actors called'John'by order of number of movies in which they acted\n**Answer：**\n```\nSELECT name, COUNT(movieid)\n  FROM casting JOIN actor ON actorid=actor.id\n WHERE name LIKE 'John %'\n GROUP BY name ORDER BY 2 DESC\n```\n4.Select the result that would be obtained from this code:\n```\n SELECT title \n   FROM movie JOIN casting ON (movieid=movie.id)\n              JOIN actor   ON (actorid=actor.id)\n  WHERE name='Paul Hogan' AND ord = 1\n```\n**Answer：**\n![444.png](https://i.loli.net/2021/02/13/Gsr1UlZE3VK4DjP.png)\n5.Select the statement that lists all the actors that starred in movies directed by Ridley Scott who has id 351\n**Answer：**\n```\nSELECT name\n  FROM movie JOIN casting ON movie.id = movieid\n  JOIN actor ON actor.id = actorid\nWHERE ord = 1 AND director = 351\n```\n6.There are two sensible ways to connect movie and actor. They are:\n**Answer：**\n```\nlink the director column in movies with the primary key in actor\nconnect the primary keys of movie and actor via the casting table\n```\n7.Select the result that would be obtained from the following code:\n```\n SELECT title, yr \n   FROM movie, casting, actor \n  WHERE name='Robert De Niro' AND movieid=movie.id AND actorid=actor.id AND ord = 3\n```\n**Answer：**\n![777.png](https://i.loli.net/2021/02/13/5DJKF7XcxEd2fbR.png)\n## Summary\n- 图源自[菜鸟教程](https://www.runoob.com/sql/sql-join.html)\n![sql-join.png](https://i.loli.net/2021/02/12/OEb6fnrHqUAPpXI.png)\n- 注意多张表连接格式","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-6.JOIN(合并表格)","url":"/2021/02/12/sql-6/","content":"## The JOIN operation/zh\n![_ZU7~_P_9_GNVJP_ZUQ_6A1.png](https://i.loli.net/2021/02/12/ryHncqdvNgSt842.png)\n![H~TV_916__7_Q_0S__T46_8.png](https://i.loli.net/2021/02/12/BgNUiZIsKeyFH9G.png)\n```\n1.列出 賽事編號matchid 和球員名 player ,該球員代表德國隊Germany入球的。要找出德國隊球員，要檢查: teamid = 'GER'\nSELECT matchid,player FROM goal \n  WHERE teamid = 'GER'\n```\n```\n2.由以上查詢，你可見Lars Bender's 於賽事 1012入球。.現在我們想知道此賽事的對賽隊伍是哪一隊。\n留意在 goal 表格中的欄位 matchid ，是對應表格game的欄位id。我們可以在表格 game中找出賽事1012的資料。\n只顯示賽事1012的 id, stadium, team1, team2\nselect id,stadium,team1,team2 from game\nwhere id = 1012\n```\n```\n3.顯示每一個德國入球的球員名，隊伍名，場館和日期。\nSELECT player,teamid,stadium,mdate\n  FROM goal JOIN game ON (goal.matchid=game.id) where teamid = 'GER'\n```\n```\n4.列出球員名字叫Mario (player LIKE 'Mario%')有入球的 隊伍1 team1, 隊伍2 team2 和 球員名 player\nselect team1,team2,player from game join goal on (game.id=goal.matchid)\nwhere player like 'Mario%'\n```\n```\n5.列出每場球賽中首10分鐘gtime<=10有入球的球員 player, 隊伍teamid, 教練coach, 入球時間gtime\nselect player,teamid,coach,gtime from goal join eteam on (goal.teamid=eteam.id)\nwhere gtime<=10\n```\n```\n6.列出'Fernando Santos'作為隊伍1 team1 的教練的賽事日期，和隊伍名。\nselect mdate,teamname from game join eteam on (game.team1=eteam.id)\nwhere coach = 'Fernando Santos'\n```\n```\n7.列出場館 'National Stadium, Warsaw'的入球球員。\nselect player from game join goal on (game.id=goal.matchid)\nwhere stadium = 'National Stadium, Warsaw'\n```\n**More Difficult**\n```\n8.只列出全部賽事，射入德國龍門的球員名字。\nselect distinct player from game join goal on matchid = id \nwhere (team1='GER' or team2='GER') and teamid!='GER'\n```\n```\n9.列出隊伍名稱 teamname 和該隊入球總數\nselect teamname, count(player)\nfrom eteam JOIN goal ON id=teamid\ngroup by teamname\n```\n```\n10.列出場館名和在該場館的入球數字。\nselect stadium, count(player)\nfrom game JOIN goal ON id=matchid\ngroup by stadium\n```\n```\n11.每一場波蘭'POL'有參與的賽事中，列出賽事編號 matchid, 日期date 和入球數字。\nselect matchid,mdate,count(player)\nfrom game join goal on id = matchid\nwhere team1 = 'POL' or team2 = 'POL'\ngroup by matchid,mdate\n```\n```\n12.每一場德國'GER'有參與的賽事中，列出賽事編號 matchid, 日期date 和德國的入球數字。\nselect matchid,mdate,count(player)\nfrom game join goal on id = matchid\nwhere (team1 = 'GER' or team2 = 'GER') and teamid = 'GER'\ngroup by matchid,mdate\n```\n```\n13.List every match with the goals scored by each team as shown. This will use \"CASE WHEN\" which has not been explained in any previous exercises.\nNotice in the query given every goal is listed. If it was a team1 goal then a 1 appears in score1, otherwise there is a 0. You could SUM this column to get a count of the goals scored by team1. Sort your result by mdate, matchid, team1 and team2.\n\nselect mdate,team1,\nsum(case when teamid=team1 then 1 else 0 end) score1,team2,\nsum(case when teamid=team2 then 1 else 0 end) score2\nfrom game left join goal on id = matchid\ngroup by mdate,team1,team2\norder by mdate,matchid,team1,team2\n\ncase与之前条件排序的用法原理相似，会得到一个结果列表(每行都有一个结果，整体是0和1组成)，分组后对其进行聚合操作(SUM)\n```\n## Music Tutorial/zh\nalbum(asin, title, artist, price, release, label, rank)\n大碟(asin, 碟名, 歌手, 售價, 推出, 標籤, 排名)\n\ntrack(album, dsk, posn, song)\n曲目(大碟, 碟號, 軌號, 歌名)\n```\n1.找出收錄歌曲song 'Alison'　碟名title和歌手artist\nSELECT title,artist\n  FROM album JOIN track\n         ON (album.asin=track.album)\n WHERE song = 'Alison'\n```\n```\n2.哪一歌手artist 錄了歌曲 song 'Exodus'?\nselect artist from album join track on (asin=album)\nwhere song = 'Exodus'\n```\n```\n3.為大碟album 'Blur'， 顯示每一首歌的歌名 song 。\nselect song from album join track on (asin=album)\nwhere title = 'Blur'\n```\n```\n4.為每一大碟album顯示歌名title和每大碟的歌曲track數量。\nSELECT title,count(song) FROM album JOIN track ON (asin=album)\n GROUP BY title\n```\n```\n5.為每一大碟album列出碟名title 歌名中有'Heart'一詞的歌曲數量。 (沒有這些歌的大碟不用列出).\nselect title,count(song) from album join track on (asin=album)\nwhere song like '%Heart%'\ngroup by title\n```\n```\n6.主題歌曲是歌名 song 和大碟名字 title相同。找出主題歌曲。\nselect song from album join track on (asin=album)\nwhere song = title\n```\n```\n7.同名大碟是指大碟和歌手名字相同。 (例如大碟'Blur' 是由樂隊 'Blur'主唱)。 找出同名大碟。\nselect title from album\nwhere artist = title\n```\n```\n8.找出歌曲收錄在２隻以上的大碟中。列出收錄次數。\nselect song,count(distinct album) from track\ngroup by song\nhaving count(distinct album) > 2\n```\n```\n9.好價大碟是指大碟中每一首歌曲的價格是少於5角。 找出好價大碟，列出大碟名字，售價和歌曲數量。\nselect title,price,count(song) from track join album a on (a.asin=album)\nwhere 0.5 > (select price/count(song) from track join album b on (b.asin=album) where a.asin = b.asin group by price)\ngroup by title,price\n```\n```\n10.歌手Wagner的大碟 Ring cycle 有173首歌曲, 歌手Bing Crosby有一大碟 收錄了 101首歌曲。\n按歌曲量(多至少)列出每一大碟的碟名和歌曲數量。\nselect title,count(song) from album join track on (asin=album)\ngroup by title\norder by count(song) desc\n```\n## Quiz\n![H~TV_916__7_Q_0S__T46_8.png](https://i.loli.net/2021/02/12/BgNUiZIsKeyFH9G.png)\n1.You want to find the stadium where player 'Dimitris Salpingidis' scored. Select the JOIN condition to use:\n**Answer：**\n```\ngame JOIN goal ON (id=matchid)\n```\n2.You JOIN the tables goal and eteam in an SQL statement. Indicate the list of column names that may be used in the SELECT line:\n**Answer：**\n```\nmatchid, teamid, player, gtime, id, teamname, coach\n```\n3.Select the code which shows players, their team and the amount of goals they scored against Greece(GRE).\n**Answer：**\n```\nSELECT player, teamid, COUNT(*)\n  FROM game JOIN goal ON matchid = id\n WHERE (team1 = \"GRE\" OR team2 = \"GRE\")\n   AND teamid != 'GRE'\n GROUP BY player, teamid\n```\n4.Select the result that would be obtained from this code:\n```\nSELECT DISTINCT teamid, mdate\n  FROM goal JOIN game on (matchid=id)\n WHERE mdate = '9 June 2012'\n```\n**Answer：**\n![U4HU_T58Y3Y7AHZG_S4KBB7.png](https://i.loli.net/2021/02/12/xijJhQrXepgSfKG.png)\n5.Select the code which would show the player and their team for those who have scored against Poland(POL) in National Stadium, Warsaw.\n**Answer：**\n```\n  SELECT DISTINCT player, teamid \n   FROM game JOIN goal ON matchid = id \n  WHERE stadium = 'National Stadium, Warsaw' \n AND (team1 = 'POL' OR team2 = 'POL')\n   AND teamid != 'POL'\n```\n6.Select the code which shows the player, their team and the time they scored, for players who have played in Stadion Miejski (Wroclaw) but not against Italy(ITA).\n**Answer：**\n```\nSELECT DISTINCT player, teamid, gtime\n  FROM game JOIN goal ON matchid = id\n WHERE stadium = 'Stadion Miejski (Wroclaw)'\n   AND (( teamid = team2 AND team1 != 'ITA') OR ( teamid = team1 AND team2 != 'ITA'))\n```\n7.Select the result that would be obtained from this code:\n```\nSELECT teamname, COUNT(*)\n  FROM eteam JOIN goal ON teamid = id\n GROUP BY teamname\nHAVING COUNT(*) < 3\n```\n**Answer：**\n![F~@~__CP_KB@@VHPZ4T_3_P.png](https://i.loli.net/2021/02/12/uV9rReNfmhxwsi4.png)\n## Summary\n- 图源自[菜鸟教程](https://www.runoob.com/sql/sql-join.html)\n![sql-join.png](https://i.loli.net/2021/02/12/OEb6fnrHqUAPpXI.png)\n- The JOIN operation/zh中的T13之所以用left join的原因是即使goal表中没有记录，也就是这场比赛双方都没有得分，数据仍然需要列出来，所以game left join goal\n- 注意区分PK和FK","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-5.SUM and COUNT(群组/聚合函数)","url":"/2021/02/10/sql-5/","content":"world表：\n\n|  name   | continent | area | population | gdp\n|  :----:  | :----:  |  :----:  | :----:  | :----:\n| Afghanistan  | Asia | 652230 | 25500100 | 20343000000\n| Albania  | Europe | 28748\t| 2831741\t| 12960000000\n| Algeria  | Africa | 2381741\t| 37100000 | 188681000000\n| Andorra  | Europe | 468\t| 78115\t| 3712000000\n| Angola  | Africa | 1246700 | 20609294 | 100990000000\n| ... | ... | ... | ... | ...\n\n**name:** 国家名称\n**continent:** 洲\n**area:** 面积\n**population:** 人口\n**gdp:** 国内生产总值\n## SUM and COUNT/zh\n```\n1.展示世界的總人口。\nSELECT sum(population)\nFROM world\n```\n```\n2.列出所有的洲份, 每個只有一次。\nselect distinct continent from world\n```\n```\n3.找出非洲(Africa)的GDP總和。\nselect sum(gdp) from world\nwhere continent = 'Africa'\n```\n```\n4.有多少個國家具有至少百萬(1000000)的面積。\nselect count(name) from world\nwhere area >= 1000000\n```\n```\n5.('France','Germany','Spain')（“法國”，“德國”，“西班牙”）的總人口是多少？\nselect sum(population) from world\nwhere name in ('France','Germany','Spain')\n```\n```\n6.對於每一個洲份，顯示洲份和國家的數量。\nselect continent,count(name) from world\ngroup by continent\n```\n```\n7.對於每一個洲份，顯示洲份和至少有1000萬人(10,000,000)口國家的數目。\nselect continent,count(name) from world\nwhere population >= 10000000\ngroup by continent\n```\n```\n8.列出有至少100百萬(1億)(100,000,000)人口的洲份。\nselect continent from world\ngroup by continent\nhaving sum(population) >= 100000000\n```\n## The nobel table can be used to practice more SUM and COUNT functions./zh\n```\n1.找出總共有多少個獎頒發了。\nSELECT COUNT(winner) FROM nobel\n```\n```\n2.列出每一個獎項(subject), 只列一次\nselect distinct subject from nobel\n```\n```\n3.找出物理獎的總頒發次數。\nselect count(yr) from nobel\nwhere subject = 'Physics'\n```\n```\n4.對每一個獎項(Subject),列出頒發數目。\nselect subject,count(yr) from nobel\ngroup by subject\n```\n```\n5.對每一個獎項(Subject),列出首次頒發的年份。\nselect subject,min(yr) from nobel\ngroup by subject\n```\n```\n6.對每一個獎項(Subject),列出2000年頒發的數目。\nselect subject,count(winner) from nobel\nwhere yr = 2000\ngroup by subject\n```\n```\n7.對每一個獎項(Subject),列出有多少個不同的得獎者。\nselect subject,count(distinct winner) from nobel\ngroup by subject\n```\n```\n8.對每一個獎項(Subject),列出有多少年曾頒發過。\nselect subject,count(distinct yr) from nobel\ngroup by subject\n```\n```\n9.列出哪年曾同年有3個物理獎Physics得獎者。\nselect yr from nobel\nwhere subject = 'Physics'\ngroup by yr\nhaving count(winner) = 3\n```\n```\n10.列出誰得獎多於一次。\nselect winner from nobel\ngroup by winner\nhaving count(yr) > 1\n```\n```\n11.列出誰獲得多於一個獎項(Subject)\nselect winner from nobel\ngroup by winner\nhaving count(distinct subject) > 1\n```\n```\n12.哪年哪獎項，是同一獎項(subject)頒發給3個人。只列出2000年及之後的資料。\nselect yr,subject from nobel\nwhere yr >= 2000\ngroup by yr,subject\nhaving count(winner) = 3\n```\n## Quiz\n![_5X1B_63_NIY~__@O_P_7VX.png](https://i.loli.net/2021/02/09/jC3YROmWFeHpo8I.png)\n1.Select the statement that shows the sum of population of all countries in 'Europe'\n**Answer：**\n```\nSELECT SUM(population) FROM bbc WHERE region = 'Europe'\n```\n2.Select the statement that shows the number of countries with population smaller than 150000\n**Answer：**\n```\nSELECT COUNT(name) FROM bbc WHERE population < 150000\n```\n3.Select the list of core SQL aggregate functions\n**Answer：**\n```\nAVG(), COUNT(), MAX(), MIN(), SUM()\n```\n4.Select the result that would be obtained from the following code:\n```\n SELECT region, SUM(area)\n   FROM bbc \n  WHERE SUM(area) > 15000000 \n  GROUP BY region\n```\n**Answer：**\n```\nNo result due to invalid use of the WHERE function\n```\n5.Select the statement that shows the average population of 'Poland', 'Germany' and 'Denmark'\n**Answer：**\n```\nSELECT AVG(population) FROM bbc WHERE name IN ('Poland', 'Germany', 'Denmark')\n```\n6.Select the statement that shows the medium population density of each region\n**Answer：**\n```\nSELECT region, SUM(population)/SUM(area) AS density FROM bbc GROUP BY region\n```\n7.Select the statement that shows the name and population density of the country with the largest population\n**Answer：**\n```\nSELECT name, population/area AS density FROM bbc WHERE population = (SELECT MAX(population) FROM bbc)\n```\n8.Pick the result that would be obtained from the following code:\n```\n SELECT region, SUM(area) \n   FROM bbc \n  GROUP BY region \n  HAVING SUM(area)<= 20000000\n```\n**Answer：**\n![Q6YSU_E4_7__BQELH5IK@1W.png](https://i.loli.net/2021/02/10/DwLx6N9P8MBJIkF.png)\n## Summary\n- 聚合函数将多个数据进行计算，得出的结果只有一个数据，内部可以使用distinct去掉重复值\n- 使用group by后，前面的select只能是分组条件或是使用聚合函数\n- where和having，group by前的where是分组之前的筛选，having是分组后要进行的操作\n- 可以进行多次分组，例如每个x下的每个y，可以用group by x,y","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-4.SELECT within SELECT(子查询)","url":"/2021/02/08/sql-4/","content":"world表：\n\n|  name   | continent | area | population | gdp\n|  :----:  | :----:  |  :----:  | :----:  | :----:\n| Afghanistan  | Asia | 652230 | 25500100 | 20343000000\n| Albania  | Europe | 28748\t| 2831741\t| 12960000000\n| Algeria  | Africa | 2381741\t| 37100000 | 188681000000\n| Andorra  | Europe | 468\t| 78115\t| 3712000000\n| Angola  | Africa | 1246700 | 20609294 | 100990000000\n| ... | ... | ... | ... | ...\n\n**name:** 国家名称\n**continent:** 洲\n**area:** 面积\n**population:** 人口\n**gdp:** 国内生产总值\n## SELECT within SELECT Tutorial/zh\n```\n1.列出每個國家的名字 name，當中人口 population 是高於俄羅斯'Russia'的人口。\nSELECT name FROM world\n  WHERE population >\n     (SELECT population FROM world\n      WHERE name='Russia')\n```\n```\n2.列出歐州每國家的人均GDP，當中人均GDP要高於英國'United Kingdom'的數值。\nselect name from world\nwhere continent = 'Europe' and gdp/population >\n(select gdp/population from world\nwhere name = 'United Kingdom')\n```\n```\n3.在阿根廷Argentina 及 澳大利亞 Australia所在的洲份中，列出當中的國家名字 name 及洲分 continent 。按國字名字順序排序\nselect name,continent from world\nwhere continent in \n(select continent from world\nwhere name in ('Argentina','Australia'))\norder by name\n```\n```\n4.哪一個國家的人口比加拿大Canada的多，但比波蘭Poland的少?列出國家名字name和人口population 。\nselect name,population from world\nwhere population >\n(select population from world\nwhere name = 'Canada')\nand population < \n(select population from world\nwhere name = 'Poland')\n```\n```\n5.Germany德國（人口8000萬），在Europe歐洲國家的人口最多。Austria奧地利（人口850萬）擁有德國總人口的11％。\n顯示歐洲的國家名稱name和每個國家的人口population。以德國的人口的百分比作人口顯示。\nselect name,concat(round((population/(select population from world where name = 'Germany'))*100,0),'%') from world\nwhere continent = 'Europe'\n```\n```\n6.哪些國家的GDP比Europe歐洲的全部國家都要高呢? [只需列出 name 。] (有些國家的記錄中，GDP是NULL，沒有填入資料的。)\nselect name from world\nwhere gdp > all(select gdp from world\nwhere gdp > 0 and continent = 'Europe')\n```\n```\n7.在每一個州中找出最大面積的國家，列出洲份 continent, 國家名字 name 及面積 area。 (有些國家的記錄中，AREA是NULL，沒有填入資料的。)\nSELECT continent, name, area FROM world x\n  WHERE area >= ALL\n    (SELECT area FROM world y\n        WHERE y.continent=x.continent\n          AND area>0)\n```\n```\n8.列出洲份名稱，和每個洲份中國家名字按子母順序是排首位的國家名。(即每洲只有列一國)\nselect continent,name from world w1\nwhere name = (select name from world w2\nwhere w1.continent = w2.continent\norder by name limit 1)\n另一种方法，直接使用group by\nselect continent,min(name) from world\ngroup by continent\n```\n**More difficult**\n```\n9.找出洲份，當中全部國家都有少於或等於 25000000 人口. 在這些洲份中，列出國家名字name，continent 洲份和population人口。\nselect name,continent,population from world w1\nwhere 25000000 >= all(select population from world w2\nwhere w2.continent = w1.continent)\n```\n```\n10.有些國家的人口是同洲份的所有其他國的3倍或以上。列出 國家名字name 和 洲份 continent。\nselect name,continent from world w1\nwhere w1.population >= all(select 3*population from world w2\nwhere w1.continent = w2.continent and w2.population > 0 and w1.name != w2.name)\n```\n## The nobel table can be used to practice more subquery./zh\n```\n1.紅十字國際委員會 (International Committee of the Red Cross) 曾多次獲得和平獎。 試找出與紅十字國際委員會同年得獎的文學獎(Literature)得獎者和年份。\nselect winner,yr from nobel\nwhere subject = 'Literature' and yr in (select yr from nobel \nwhere winner = 'International Committee of the Red Cross' and subject = 'Peace')\n```\n```\n2.日本物理學家益川敏英 (Toshihide Maskawa) 曾獲得物理獎。同年還有兩位日本人一同獲得物理獎。試列出這2位日本人的名稱。\nselect winner from nobel\nwhere winner != 'Toshihide Maskawa' and subject = 'Physics' and yr = (select yr from nobel where winner = 'Toshihide Maskawa' and subject = 'Physics')\n```\n```\n3.首次頒發的經濟獎 (Economics)的得獎者是誰?\nselect winner from nobel\nwhere subject = 'Economics' and yr = (select min(yr) from nobel\nwhere subject = 'Economics')\n```\n```\n4.哪幾年頒發了物理獎，但沒有頒發化學獎?\nselect distinct yr from nobel\nwhere subject = 'Physics' and yr not in (select distinct yr from nobel\nwhere subject = 'Chemistry')\n```\n```\n5.哪幾年的得獎者人數多於12人呢? 列出得獎人數多於12人的年份，獎項和得獎者。\nselect yr,subject,winner from nobel\nwhere yr in (select yr from nobel\ngroup by yr\nhaving count(winner) > 12)\n```\n```\n6.哪些得獎者獲獎多於1次呢？他們是哪一年獲得哪項獎項呢？ 列出他們的名字，獲獎年份及獎項。先按名字，再按年份順序排序。\nselect winner,yr,subject from nobel\nwhere winner in (select winner from nobel\ngroup by winner having count(yr) > 1)\norder by winner,yr\n```\n## Quiz\n![_5X1B_63_NIY~__@O_P_7VX.png](https://i.loli.net/2021/02/09/jC3YROmWFeHpo8I.png)\n1.選擇代碼以顯示在每個區域人口最小的國家的國家名稱，區域和人口。\n**Answer：**\n```\nSELECT region, name, population FROM bbc x WHERE population <= ALL (SELECT population FROM bbc y WHERE y.region=x.region AND population>0)\n```\n2.選擇代碼以顯示國家名稱，該國所在的地區每國人口都超過50000。\n**Answer：**\n```\nSELECT name,region,population FROM bbc x WHERE 50000 < ALL (SELECT population FROM bbc y WHERE x.region=y.region AND y.population>0)\n```\n3.選擇代碼以顯示國家名稱，該國家人口少於它周圍的全部國家的人口三分之一。\n**Answer：**\n```\nSELECT name, region FROM bbc x\n WHERE population < ALL (SELECT population/3 FROM bbc y WHERE y.region = x.region AND y.name != x.name)\n```\n4.選擇你會從這個代碼獲得的結果。\n```\nSELECT name FROM bbc\n WHERE population >\n       (SELECT population\n          FROM bbc\n         WHERE name='United Kingdom')\n   AND region IN\n       (SELECT region\n          FROM bbc\n         WHERE name = 'United Kingdom')\n```\n**Answer：**\n![t4.png](https://i.loli.net/2021/02/10/arSUPTKjLGE5iA3.png)\n5.選擇代碼以顯示國家名稱，該國有比非洲任何國家更大的國內生產總值GDP。\n**Answer：**\n```\nSELECT name FROM bbc\n WHERE gdp > ALL (SELECT MAX(gdp) FROM bbc WHERE region = 'Africa' AND gdp IS NOT NULL)\n```\n6.選擇代碼以顯示國家名稱，該國人口比俄羅斯少，但比丹麥的多。\n**Answer：**\n```\nSELECT name FROM bbc\n WHERE population < (SELECT population FROM bbc WHERE name='Russia')\n   AND population > (SELECT population FROM bbc WHERE name='Denmark')\n```\n7.選擇你會從這個代碼獲得的結果。\n```\nSELECT name FROM bbc\n WHERE population > ALL\n       (SELECT MAX(population)\n          FROM bbc\n         WHERE region = 'Europe')\n   AND region = 'South Asia'\n```\n**Answer：**\n![t7.png](https://i.loli.net/2021/02/10/5ANtkR1bKEwPxJF.png)\n## Summary\n- 其实感觉all和max，min相似...\n- 有多个非指定数值的筛选条件的话一般都存在子查询，多重查询\n- select的结果可能一行也有可能是多行，注意外层分别用'='和'in'的情况\n- 多重查询记得考虑内外表是否有关联","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-3.SELECT from Nobel","url":"/2021/02/05/sql-3/","content":"nobel表：\n\n|  yr   | subject | winner |\n|  :----:  | :----:  |  :----:  |\n1960 | Chemistry | Willard F. Libby\n1960 | Literature | Saint-John Perse\n1960 | Medicine | Sir Frank Macfarlane Burnet\n1960 | Medicine | Peter Madawar\n| ... | ... | ... | ... | ...\n\n**yr:** 年份\n**subject:** 奖项\n**winner:** 获奖者\n## SELECT from Nobel Tutorial/zh\n```\n1.更改查詢以顯示1950年諾貝爾獎的獎項資料。\nSELECT yr, subject, winner\n  FROM nobel\n WHERE yr = 1950\n```\n```\n2.顯示誰贏得了1962年文學獎(Literature)。\nSELECT winner\n  FROM nobel\n WHERE yr = 1962\n   AND subject = 'Literature'\n```\n```\n3.顯示“愛因斯坦”('Albert Einstein') 的獲獎年份和獎項。\nselect yr,subject\nfrom nobel\nwhere winner = 'Albert Einstein'\n```\n```\n4.顯示2000年及以後的和平獎(‘Peace’)得獎者。\nselect winner\nfrom nobel\nwhere yr >= 2000 and subject = 'Peace'\n```\n```\n5.顯示1980年至1989年(包含首尾)的文學獎(Literature)獲獎者所有細節（年，主題，獲獎者）。\nselect yr,subject,winner\nfrom nobel\nwhere yr between 1980 and 1989 and subject = 'Literature'\n```\n```\n6.顯示總統獲勝者的所有細節：\n西奧多•羅斯福 Theodore Roosevelt\n伍德羅•威爾遜 Woodrow Wilson\n吉米•卡特 Jimmy Carter\n\nselect * from nobel\nwhere winner in ('Theodore Roosevelt','Woodrow Wilson','Jimmy Carter')\n```\n```\n7.顯示名字為John 的得獎者。 (注意:外國人名字(First name)在前，姓氏(Last name)在後)\nselect winner\nfrom nobel\nwhere winner like 'John %'\n```\n```\n8.顯示1980年物理學(physics)獲獎者，及1984年化學獎(chemistry)獲得者。\nselect * from nobel\nwhere (yr = 1980 and subject = 'physics') or (yr = 1984 and subject = 'chemistry') \n```\n```\n9.除查看1980年獲獎者，但不包括化學獎(Chemistry)和醫學獎(Medicine)。\nselect * from nobel\nwhere yr = 1980 and subject not in ('Chemistry','Medicine')\n```\n```\n10.顯示早期的醫學獎(Medicine)得獎者（1910之前，不包括1910），及近年文學獎(Literature)得獎者（2004年以後，包括2004年）。\nselect * from nobel\nwhere (yr < 1910 and subject = 'Medicine') or (yr >= 2004 and subject = 'Literature')\n```\n**More difficult**\n```\n11.Find all details of the prize won by PETER GRÜNBERG(直接复制就好了233)\n\nselect * from nobel\nwhere winner = 'PETER GRÜNBERG'\n```\n```\n12.查找尤金•奧尼爾EUGENE O'NEILL得獎的所有細節 Find all details of the prize won by EUGENE O'NEILL\n\nselect * from nobel\nwhere winner = 'EUGENE O''NEILL'\n```\n```\n13.列出爵士的獲獎者、年份、獎頁(爵士的名字以Sir開始)。先顯示最新獲獎者，然後同年再按名稱順序排列。\n\nselect winner,yr,subject\nfrom nobel\nwhere winner like 'Sir%'\norder by yr desc,winner\n```\n```\n14.The expression subject IN ('Chemistry','Physics') can be used as a value - it will be 0 or 1.\nShow the 1984 winners and subject ordered by subject and winner name; but list Chemistry and Physics last.(用Mysql引擎，用sql server貌似不行，这个操作相当于自己加一个的条件排序)\n\nSELECT winner,subject\nFROM nobel\nWHERE yr=1984\nORDER BY (case when subject in ('Chemistry','Physics') then 1 else 0 end),subject,winner\n\n(case when subject in ('Chemistry','Physics') then 1 else 0 end)这玩意儿就像是给每行数据一个排序索引，subject在('Chemistry','Physics')这里面的要放到后面，所以给他们的值是1，其余是0，再升序排列就可以了（默认就是升序），去瞄了一眼别人的答案，是这样的：\n\nSELECT winner,subject\nFROM nobel\nWHERE yr=1984\nORDER BY subject in ('Chemistry','Physics'),subject,winner\n\n恍然大悟，原来可以直接用（是我傻了）\n```\n## Quiz\n![P__4X0F_F_J_I23L5_VJ7_N.png](https://i.loli.net/2021/02/08/FSG9Iitbqcjo7EQ.png)\n1.選擇代碼以顯示以C開頭，並以n結束獲獎者的名字。\n**Answer：**\n```\nSELECT winner FROM nobel\n WHERE winner LIKE 'C%' AND winner LIKE '%n'\n```\n2.選擇代碼以顯示1950年到1960年間有多少個化學獎。\n**Answer：**\n```\nSELECT COUNT(subject) FROM nobel\n WHERE subject = 'Chemistry'\n   AND yr BETWEEN 1950 and 1960\n```\n3.選擇代碼以顯示有多少年沒有頒發醫學獎。\n**Answer：**\n```\nSELECT COUNT(DISTINCT yr) FROM nobel\n WHERE yr NOT IN (SELECT DISTINCT yr FROM nobel WHERE subject = 'Medicine')\n```\n4.選擇你會從這個代碼獲得的結果。\n```\nSELECT subject, winner FROM nobel WHERE winner LIKE 'Sir%' AND yr LIKE '196%'\n```\n**Answer：**\n![WWLI1W`LD__LZD_`_8U_8@Q.png](https://i.loli.net/2021/02/08/3UIqMSmgw7d2Env.png)\n5.選擇代碼以顯示哪一年沒有頒發物理獎，亦沒有頒發化學獎\n**Answer：**\n```\nSELECT yr FROM nobel\n WHERE yr NOT IN(SELECT yr \n                   FROM nobel\n                 WHERE subject IN ('Chemistry','Physics'))\n```\n6.選擇代碼以顯示哪一年有頒發醫學獎，但沒有頒發和平或文學獎。\n**Answer：**\n```\nSELECT DISTINCT yr\n  FROM nobel\n WHERE subject='Medicine' \n   AND yr NOT IN(SELECT yr FROM nobel \n                  WHERE subject='Literature')\n   AND yr NOT IN (SELECT yr FROM nobel\n                   WHERE subject='Peace')\n```\n7.選擇你會從這個代碼獲得的結果。\n```\n SELECT subject, COUNT(subject) \n   FROM nobel \n  WHERE yr ='1960' \n  GROUP BY subject\n```\n**Answer：**\n![ZSH3JW8LK1Z85ZW_Y_MCPH6.png](https://i.loli.net/2021/02/08/BdmSxERJLN1ZoIe.png)\n## Summary\n- 关于T14中order by后有条件排序的情况，网上资料有点少，发几个我自己看到的网址吧\nhttps://www.cnblogs.com/pcx105/p/14102912.html\nhttps://www.cnblogs.com/ceeekor/p/3675224.html\norder by 后面直接加1,2这类数字是指定第几列，如order by 1是根据第一列升序排序","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-2.SELECT from World","url":"/2021/02/05/sql-2/","content":"自己做的主要是中文版，但是目前发现中英文的题目并不完全相同...有部分是摘自英文版\n\nworld表：\n\n|  name   | continent | area | population | gdp\n|  :----:  | :----:  |  :----:  | :----:  | :----:\n| Afghanistan  | Asia | 652230 | 25500100 | 20343000000\n| Albania  | Europe | 28748\t| 2831741\t| 12960000000\n| Algeria  | Africa | 2381741\t| 37100000 | 188681000000\n| Andorra  | Europe | 468\t| 78115\t| 3712000000\n| Angola  | Africa | 1246700 | 20609294 | 100990000000\n| ... | ... | ... | ... | ...\n\n**name:** 国家名称\n**continent:** 洲\n**area:** 面积\n**population:** 人口\n**gdp:** 国内生产总值\n## SELECT from WORLD Tutorial/zh\n```\n1.觀察運行一個簡單的SQL命令的結果。\nSELECT name, continent, population FROM world\n```\n```\n2.顯示具有至少2億人口的國家名稱。 2億是200000000，有八個零。\nSELECT name FROM world\nWHERE population>200000000\n```\n```\n3.找出有至少200百萬(2億)人口的國家名稱，及人均國內生產總值。\nselect name,gdp/population\nfrom world\nwhere population>200000000\n```\n```\n4.顯示'South America'南美洲大陸的國家名字和以百萬為單位人口數。 將人口population 除以一百萬(1000000)得可得到以百萬為單位人口數。\nselect name,population/1000000\nfrom world\nwhere continent = 'South America'\n```\n```\n5.顯示法國，德國，意大利(France, Germany, Italy)的國家名稱和人口。\nselect name,population\nfrom world\nwhere name in('France','Germany','Italy')\n```\n```\n6.顯示包含單詞“United”為名稱的國家。\nselect name from world\nwhere name LIKE '%United%'\n```\n```\n7.成為大國的兩種方式：如果它有3百萬平方公里以上的面積，或擁有250百萬(2.5億)以上人口。\n展示大國的名稱，人口和面積。\nselect name,population,area\nfrom world\nwhere area > 3000000 or population > 250000000\n```\n```\n8.美國、印度和中國(USA, India, China)是人口又大，同時面積又大的國家。排除這些國家。\n顯示以人口或面積為大國的國家，但不能同時兩者。顯示國家名稱，人口和面積。\nselect name,population,area\nfrom world\nwhere (area > 3000000 and population <= 250000000) or (area <= 3000000 and population > 250000000) \n```\n```\n9.除以為1000000（6個零）是以百萬計。除以1000000000（9個零）是以十億計。使用 ROUND 函數來顯示的數值到小數點後兩位。\n對於南美顯示以百萬計人口，以十億計2位小數GDP。\nselect name,round(population/1000000,2),round(gdp/1000000000,2)\nfrom world\nwhere continent = 'South America'\n```\n```\n10.顯示國家有至少一個萬億元國內生產總值（萬億，也就是12個零）的人均國內生產總值。四捨五入這個值到最接近1000。\n顯示萬億元國家的人均國內生產總值，四捨五入到最近的$1000。\nselect name,round(gdp/population,-3)\nfrom world\nwhere gdp >= 1000000000000\n```\n**More difficult**\n```\n11.The CASE statement shown is used to substitute North America for Caribbean in the third column.\nShow the name - but substitute Australasia for Oceania - for countries beginning with N.(我明明选了zh捏...)\n\nSELECT name, \n       CASE WHEN continent='Oceania' THEN 'Australasia'\n            ELSE continent END\n  FROM world\n WHERE name LIKE 'N%'\n```\n```\n12.Show the name and the continent - but substitute Eurasia for Europe and Asia; substitute America - for each country in North America or South America or Caribbean. Show countries beginning with A or B\n\nselect name,\n    case when continent in ('Europe','Asia') \n         then 'Eurasia'\n         when continent in ('North America','South America','Caribbean')\n         then 'America'\n         else continent\n    end\nfrom world\nwhere name LIKE 'A%' or name LIKE 'B%'\n```\n```\n13.Put the continents right...\n   Oceania becomes Australasia\n   Countries in Eurasia and Turkey go to Europe/Asia\n   Caribbean islands starting with 'B' go to North America, other Caribbean islands go to South America\n   Show the name, the original continent and the new continent of all countries.(这个题的运行口貌似有点问题一直显示错误，在12题处运行就没有问题，但是不能有空格)\n\nselect name,continent,\ncase when continent = 'Oceania'\nthen 'Australasia'\nwhen continent in ('Eurasia','Turkey')\nthen 'Europe/Asia'\nwhen continent = 'Caribbean' and name like 'B%'\nthen 'North America'\nwhen continent = 'Caribbean'\nthen 'South America'\nelse continent\nend\nfrom world\n```\n## SELECT from WORLD Tutorial\n```\n11.Greece has capital Athens.\n   Each of the strings 'Greece', and 'Athens' has 6 characters.\n   Show the name and capital where the name and the capital have the same number of characters.\n\nSELECT name,capital\n  FROM world\n WHERE length(name) = length(capital)\n```\n```\n12.The capital of Sweden is Stockholm. Both words start with the letter 'S'.\n   Show the name and the capital where the first letters of each match. Don't include countries where the name and the capital are the same word.\n\nselect name,capital\nfrom world\nwhere left(name,1)=left(capital,1) and name !=capital\n```\n```\n13.Equatorial Guinea and Dominican Republic have all of the vowels (a e i o u) in the name. They don't count because they have more than one word in the name.\n   Find the country that has all the vowels and no spaces in its name.\n\nselect name\nfrom world\nwhere name not like '% %' and name like '%a%' and name like '%e%' and name like '%i%' and name like '%o%' and name like '%u%'\n```\n## Quiz\n![GTZGTWH_I5U___AYPNEOC66.png](https://i.loli.net/2021/02/05/dzgRmLIvVYZFPHB.png)\n1.選擇代碼找出以U開頭的國家名稱。\n**Answer：**\n```\nSELECT name\n  FROM world\n WHERE name LIKE 'U%'\n```\n2.選擇代碼以顯示英國United Kingdom的人口。\n**Answer：**\n```\nSELECT population\n  FROM world\n WHERE name = 'United Kingdom'\n```\n3.這個SQL代碼有什麼錯處。預計結果應該是含'France'的單列。\n```\n SELECT continent \n   FROM world \n  WHERE 'name' = 'France'\n```\n**Answer：**\n```\n'name' 應該是 name\n```\n4.選擇你會從這個代碼獲得的結果。\n```\n SELECT name, population / 10 \n  FROM world \n WHERE population < 10000\n```\n**Answer：**\n![4.png](https://i.loli.net/2021/02/05/18epjWvnHOgwRic.png)\n5.選擇代碼以顯示在歐洲和亞洲的國家的名稱和人口。\n**Answer：**\n```\nSELECT name, population\n  FROM world\n WHERE continent IN ('Europe', 'Asia')\n```\n6.選擇代碼，結果只有兩行。\n**Answer：**\n```\nSELECT name FROM world\n WHERE name IN ('Cuba', 'Togo')\n```\n7.選擇你會從這個代碼獲得的結果。\n```\nSELECT name FROM world\n WHERE continent = 'South America'\n   AND population > 40000000\n```\n**Answer：**\n![7.png](https://i.loli.net/2021/02/05/tHoJuT2ZeWnGhyk.png)\n## Summary\n- **round(num,p)** 函数：\nnum保留p位小数，例如round(7253.86, 0)    ->  7254，返回数值\n- **length(s)** 函数：\n返回字符串s的长度\n- **left(s,p)** 函数：\n从字符串s开头截取p个长度的子串，left('Hello',4) -> 'Hell'\n- **case when** 函数：\n相当于if函数，但是case when更加适用于多条件的判断，返回值就在语句then和else后，case可以在不同条件下返回不同的值；主要用于条件聚合，打标签进行分类聚合的场景","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【SQL-SQLZOO】Tutorials-1.SELECT name","url":"/2021/02/03/sql-1/","content":"world表：\n\n|  name   | continent |\n|  :----:  | :----:  |\n| Afghanistan  | Asia |\n| Albania  | Europe |\n| Algeria  | Africa |\n| Andorra  | Europe |\n| Angola  | Africa |\n| ... | ... |\n\n**name:** 国家名称\n**continent:** 洲\n## SELECT names/zh\n```\n1.找出以 Y 為開首的國家。\nSELECT name FROM world\n  WHERE name LIKE 'Y%'\n```\n```\n2.找出以 Y 為结尾的國家。\nSELECT name FROM world\n  WHERE name LIKE '%Y'\n```\n```\n3.找出所有國家,其名字包括字母x。\nSELECT name FROM world\n  WHERE name LIKE '%x%'\n```\n```\n4.找出所有國家,其名字以 land 作結尾。\nSELECT name FROM world\n  WHERE name LIKE '%land'\n```\n```\n5.找出所有國家,其名字以 C 作開始,ia 作結尾。\nSELECT name FROM world\n  WHERE name LIKE 'C%ia'\n```\n```\n6.找出所有國家,其名字包括字母oo。\nSELECT name FROM world\n  WHERE name LIKE '%oo%'\n```\n```\n7.找出所有國家,其名字包括三個或以上的a。\nSELECT name FROM world\n  WHERE name LIKE '%a%a%a%'\n```\n```\n8.找出所有國家,其名字以t作第二個字母。\nSELECT name FROM world\n WHERE name LIKE '_t%'\nORDER BY name\n```\n```\n9.找出所有國家,其名字都有兩個字母 o,被另外兩個字母相隔着。\nSELECT name FROM world\n WHERE name LIKE '%o__o%'\n```\n```\n10.找出所有國家,其名字都是 4 個字母的。\nSELECT name FROM world\n WHERE name LIKE '____'\n```\n**More difficult**\n```\n11.顯示所有國家名字,其首都和國家名字是相同的。\nSELECT name\n  FROM world\n WHERE name = capital\n```\n```\n12.顯示所有國家名字,其首都是國家名字加上”City”。\nSELECT name\n  FROM world\n WHERE capital = concat(name,' City')\n```\n```\n13.找出所有首都和其國家名字,而首都要有國家名字中出現。\nselect capital,name\nfrom world\nwhere capital like concat('%',name,'%')\n```\n```\n14.找出所有首都和其國家名字,而首都是國家名字的延伸。\n你應顯示 Mexico City,因它比其國家名字 Mexico 長。\n你不應顯示 Luxembourg,因它的首都和國家名相是相同的。\nselect name,capital\nfrom world\nwhere capital like concat(name,'_%')\n```\n```\n15.顯示國家名字，及其延伸詞，如首都是國家名字的延伸。\nselect name,replace(capital,name,'')\nfrom world\nwhere capital like concat(name,'_%')\n```\n## Quiz\n1.選擇產生此表的代碼。\n![US__9CHFUS49TM__10ADP7S.png](https://i.loli.net/2021/02/04/Oc4PD6hU1EVQfBa.png)\n**Answer：**\n```\nSELECT name, population\n  FROM world\n WHERE population BETWEEN 1000000 AND 1250000\n```\n2.選擇你會從這個代碼獲得的結果。\n```\nSELECT name, population\n      FROM world\n      WHERE name LIKE \"Al%\"\n```\n**Answer：**\n![PS__4__E6O_X__62_I6~ZES.png](https://i.loli.net/2021/02/04/SBH9KfQd1ibvYZP.png)\n3.選擇代碼以顯示以“A”或“L” 結束的國家。\n**Answer：**\n```\nSELECT name FROM world\n WHERE name LIKE '%a' OR name LIKE '%l'\n```\n4.選擇查詢的結果。\n```\nSELECT name,length(name)\nFROM world\nWHERE length(name)=5 and region='Europe'\n```\n**Answer：**\n![44.png](https://i.loli.net/2021/02/05/YXNWnuIVqOAfRhB.png)\n5.這是world表格的開首數行記錄\n![5K_N_GTJ4G2EOJK@C@L9__0.png](https://i.loli.net/2021/02/04/6YiR7sbgMfStd3r.png)\n選擇你會從這個代碼獲得的結果。\n```\nSELECT name, area*2 FROM world WHERE population = 64000\n```\n**Answer：**\n![OWP03ZWA4WB_~HBTFC57Z8A.png](https://i.loli.net/2021/02/04/Vl2g9hxsOeRukLo.png)\n6.選擇代碼以顯示面積大於50000，人口少過1000萬(10000000)的國家。\n**Answer：**\n```\nSELECT name, area, population\n  FROM world\n WHERE area > 50000 AND population < 10000000\n```\n7.選擇代碼以顯示中國，澳大利亞，尼日利亞和法國的人口密度。\n**Answer：**\n```\nSELECT name, population/area\n  FROM world\n WHERE name IN ('China', 'Nigeria', 'France', 'Australia')\n```\n## Summary\n- 主要运用了like搜索指定模式的功能，以及%和_通配符的使用\n- **concat(s1,s2,...)** 函数：\n用于合并2个或以上的字符串。返回字符串\n- **replace(s,a,b)** 函数：\nreplace('vessel','e','a') -> 'vassal' 将s中出现的字符e全部替换为a。返回字符串","tags":["Records","SQL","SQLZOO"],"categories":["DS"]},{"title":"【Project】学生健康信息平台（微信小程序）","url":"/2021/01/08/project1/","content":"\n### 空间与小程序appID设置\n- 在`main.js`中设置空间的`spaceId`、`clientSecret`；\n- 在`manifest.json`中设置微信小程序的`appID`，否则微信端获取的code为：`the code is a mock one`；\n- 在`cloudfunctions-dev/src/utils/constants.js`中设置`AppId`、`AppSecret`、`passSecret`字段，否则不能获取`openid`;\n\n\n### 项目运行和部署说明  \n- 本项目需要[HBuilderX 2.5.8（Alpha版）](https://www.dcloud.io/hbuilderx.html)以上版本才能运行。  \n\n- 项目需要[注册](https://dev.dcloud.net.cn/)和开通uniCloud ,因阿里云审核要求,需要实名认证。\n\n- 拉取项目源码后,对`cloudfunctions`目录点右键,选择你的服务空间。如果没有服务空间,需要创建,创建时会引导登录和注册uniCloud。\n  \n- 配好服务空间后,请根据项目下的[db.md](db.md)文件,在你的云数据库中创建相应的表。具体方式是对`cloudfunctions`目录点右键,打开uniCloud web控制台,在里面的云数据库界面点击\"新建表\",表名里把[db.md](db.md)涉及的表名都创建一遍。\n\n- 对每个云函数（文件夹）点右键，\"上传并部署\"到你的服务空间中。\n\n- 修改`manifest.json`中的`DCloud_AppID`为自己的。\n\n- 最后，可以运行了。如果是win版,可以直接运行在内置浏览器。如果是mac版,内置浏览器也有跨域问题,需要运行到小程序模拟器或app中,或者给mac的外部浏览器[安装跨域插件](https://ask.dcloud.net.cn/article/35267)。\n\n\n- 项目前端基于uni-app框架开发，它是一个通过vue.js编写所有平台应用的多端框架。你需要了解uni-app以便于更深度的定制。uni-app的文档详见：[https://uniapp.dcloud.io/README](https://uniapp.dcloud.io/README)\n- 项目后端基于uniCloud，它是一个基于js的云开发模式，与微信、支付宝小程序的云开发类似，但可以跨端使用。它基于serverless模型，优势众多。建议开发者通读一遍uniCloud的介绍和快速上手，以方便做二次开发。uniCloud的文档详见：[https://uniapp.dcloud.io/uniCloud/README](https://uniapp.dcloud.io/uniCloud/README)\n\n### 大致介绍\n#### 登录界面\n\n学生可自行注册登录，老师目前后台数据库注册了信息学院和电子科学与技术学院老师\n\n用户名：信息学院                   密码：12345678\n用户名：电子科学与技术学院          密码：12345678\n\n\n#### 学生端\n\n主要步骤：\n\n1. 进入学生端口后，学生可以进行注册并绑定其学生信息（如学院、年级、专业学号、姓名）以便于后面的老师端口进行管理\n2. 绑定信息后，便可以进入每日登记健康信息的界面进行体温等健康信息的登记\n\n#### 老师端\n\n主要步骤：\n\n1. 进入老师端口后，老师可以对学生的名单进行管理以及查看学生报备上了的总数据\n2. 对学生的名单进行管理时可以对所管理的学生班级/年级进行查看修改删除等操作\n3. 查看学生报备情况时可以选择相应的班级/年级查看实时学生信息报备的情况\n\n#### 其他\n\n此外，还可以在登陆界面查看全国以及全球实时疫情状况，了解疫情的实时情况。此模块用了网上的接口，运用反向代理实现页面跳转，但因为非企业小程序无法使用反向代理的业务域名，所以体验版无法展示疫情动态实时信息，截图取自开发者工具的预览。\n\n### 附录\n[Github地址](https://github.com/a123wyn/Student-information-reporting-system)\n\n[文档+代码+PPT](./软件工程大项目.zip)\n","tags":["Project","Mini Program"],"categories":["CS"]},{"title":"【Stat 110-Probability】Theme 10","url":"/2020/12/07/stat-10/","content":"**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\n资料：[SP&HW](https://projects.iq.harvard.edu/files/stat110/files/strategic_practice_and_homework_10.pdf)\n#### Lecture 27:Conditional Expectation given an R.V.\n视频：[链接地址](https://www.youtube.com/watch?v=gjBvCiRt8QA&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=27)\n![27notes.jpg](notes27.jpg)\n\n#### Lecture 28:Statistical Inequalities\n视频：[链接地址](https://www.youtube.com/watch?v=UtXK_EQ3Pow&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=28)\n![28notes.jpg](notes28-29.jpg)\n","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【Stat 110-Probability】Theme 9","url":"/2020/12/05/stat-9/","content":"**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\n资料：[SP&HW](https://projects.iq.harvard.edu/files/stat110/files/strategic_practice_and_homework_9.pdf)\n#### Lecture 23:Beta Distribution\n视频：[链接地址](https://www.youtube.com/watch?v=UZjlBQbV1KU&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=23)\n#### Lecture 24:Gamma Distribution\n视频：[链接地址](https://www.youtube.com/watch?v=Qjeswpm0cWY&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=24)\n![23notes.jpg](notes23-24.jpg)\n\n#### Lecture 25:Order Statistics and Conditional Expectation\n视频：[链接地址](https://www.youtube.com/watch?v=2LR5JYbhyjg&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=25)\n#### Lecture 26:Conditional Expectation continued\n视频：[链接地址](https://www.youtube.com/watch?v=PgawcWisb0I&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=26)\n![25notes.jpg](notes25-26.jpg)\n","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【Stat 110-Probability】Theme 8","url":"/2020/12/02/stat-8/","content":"**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\n资料：[SP&HW](https://projects.iq.harvard.edu/files/stat110/files/strategic_practice_and_homework_8.pdf)\n#### Lecture 21:Covariance and Correlation\n视频：[链接地址](https://www.youtube.com/watch?v=IujCYxtpszU&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=21)\n![F7CF5654EA6380B0D7F7090087ED9D3F.png](notes21.jpg)\n\n#### Lecture 22:Transformations and Convolutions\n视频：[链接地址](https://www.youtube.com/watch?v=yXwPUAIvFyg&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=22)\n![F722504CE3EBAD9DEE6D50A3D3E6DB3C.png](notes22.jpg)\n\n#### Thoughts\n突然想到自己的答案不如标答好看，还是不放出来献丑了...","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【Stat 110-Probability】Theme 7","url":"/2020/11/29/stat-7/","content":"**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\n资料：[SP&HW](https://projects.iq.harvard.edu/files/stat110/files/strategic_practice_and_homework_7.pdf)\n#### Lecture 19:Joint，Conditional and Marginal Distributions\n视频：[链接地址](https://www.youtube.com/watch?v=J70dP_AECzQ&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=19)\n<!-- ![image](./stat-7/19notes.jpg) -->\n![19notes.jpg](notes19.jpg)\n\n#### Lecture 20:Multinomial and Cauchy\n视频：[链接地址](https://www.youtube.com/watch?v=xiVWNkQUqKk&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=20)\n![image](notes20.jpg)\n\n#### SP&HW\n<!-- ![image](./stat-7/sp1.jpg)\n![image](./stat-7/sp2.jpg)\n![image](./stat-7/hw1.jpg)\n![image](./stat-7/hw2.jpg)\n![image](./stat-7/hw3.jpg)\n![image](./stat-7/hw4.jpg) -->\n![sp1.jpg](sp-7-1.jpg)\n![sp2.jpg](sp-7-2.jpg)\n![hw1.jpg](hw-7-1.jpg)\n![hw2.jpg](hw-7-2.jpg)\n![hw3.jpg](hw-7-3.jpg)\n![hw4.jpg](hw-7-4.jpg)\n\n#### Thoughts\n1. $Multinomial$就有点像多分类，$Marginal$ $of$ $X_{i}$其实就是$one$ $vs$ $all$情况下的$Binomial$\n2. 关于概率计算除了可以使用二重积分（在随机变量关系形成的区域$A$中积分），这还需要知道他们的联合概率密度函数（虽然一般都是independent然后直接相乘）还可以使用全概率，前提是你已经知道某随机变量的分布（$PDF/PMF$）\n3. $Conditional$用贝叶斯，概率密度函数的公式可以通过求积分来推导，$Marginal$学会积分与全概率\n4. $2D-LOTUS$原理其实跟$LOTUS$一样，只是用了联合概率密度函数而已\n5. 泊松分布的性质真滴很有用呀，关于两个独立泊松分布的加法...\n6. 关于$Joint$ $PDF/PMF/CDF$、$Marginal$ $PDF/PMF/CDF$、$Conditional$ $PDF/PMF/CDF$还真不知道咋总结，感觉求解方法都是非常多种，还是看具体题目，但是俺感觉只要理解了原理，做起来应该都不会太难滴~~\n7. 我真的要复习不完了呜呜呜...","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【Stat 110-Probability】Theme 6","url":"/2020/11/25/stat-6/","content":"**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\n资料：[SP&HW](https://projects.iq.harvard.edu/files/stat110/files/strategic_practice_and_homework_6.pdf)\n#### Lecture 16:Exponential Distribution\n视频：[链接地址](https://www.youtube.com/watch?v=bM6nFDjvEns&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=16)\n![16notes.png](notes16.jpg)\n\n#### Lecture 17:Moments Generating Functions(MGFs)\n视频：[链接地址](https://www.youtube.com/watch?v=N8O6zd6vTZ8&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=17)\n![17notes.jpg](notes17.jpg)\n\n#### Lecture 18:MGFs Continued\n视频：[链接地址](https://www.youtube.com/watch?v=tVDdx6xUOcs&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=18)\n![18notes.png](notes18.jpg)\n\n#### SP&HW\n![sp-1.jpg](sp-6-1.jpg)\n![sp-2.jpg](sp-6-2.jpg)\n![sp-3.jpg](sp-6-3.jpg)\n对了一下答案好像没啥错，肝作业去了...\n觉得这套课程的作业真滴好难啊，感觉自己太菜了...\n\n更新作业~~~~\n![hw-1.jpg](hw-6-1.jpg)\n![hw-2.jpg](hw-6-2.jpg)\n![hw-3.jpg](hw-6-3.jpg)\n![hw-4.jpg](hw-6-4.jpg)\n\n#### Thoughts\n1. 老师说原来用$LOTUS$计算的$E(x^n)$可以用$MFGs$很轻易地求解，省下了要跟$PDF$做积分的步骤，但其实求$M(t)=E(e^{tx})$的时候也要积分，应该是算$E(e^{tx})$应该比$E(x^n)$要容易的多。\n2. 算出来的$M(t)$要么求导要么级数展开看$\\frac{t^n}{n!}$的系数项，得到的就是$E(x^n)$。\n3. 妙啊~~~~\n4. 作业第2题用最大值思路算出来的积分太难了，于是忍不住翻了答案，原来这么简单...（$memorylessness$是个好东西）\n5. 感觉第4题跟这次主题没啥区别...（可能我学的不够认真）\n6. 高斯的通用$MGF$被迫求出来，更新下笔记...","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【Stat 110-Probability】Midterm Review","url":"/2020/11/24/stat-mid/","content":"今天刚拿到平板！！从期中开始在上面做笔记，goodnotes真好用嘻嘻，但是字太丑了...之前的笔记记到纸质笔记本上了，有空我再搬上来= 。 =先记录一下嘻嘻\n\n**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\nLecture 15:Midterm Review\n视频：[链接地址](https://www.youtube.com/watch?v=yFRZf81sB5k&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=15)\n资料：[期中试卷](https://projects.iq.harvard.edu/files/stat110/files/midterm_exam.pdf)（尝试了很多次放上pdf预览但是失败了，为什么！为什么！气抖冷，还是直接贴网址吧）\n\n<!-- ![image](./stat-mid/15notes.png) -->\n<!-- ![image](./stat-mid/review.png) -->\n![15notes.png](notes15.jpg)\n![review.png](review.jpg)\n考完后发现自己的考卷实在过于潦草，于是一气之下撕毁试卷（bushi)，面壁思过中...","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【Stat 110-Probability】Theme 5","url":"/2020/11/20/stat-5/","content":"**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\n资料：[SP&HW](https://projects.iq.harvard.edu/files/stat110/files/strategic_practice_and_homework_5.pdf)\n#### Lecture 11:The Poisson Distribution\n视频：[链接地址](https://www.youtube.com/watch?v=TD1N4hxqMzY&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=11)\n#### Lecture 12:Discrete vs. Continuous, the Uniform Distribution\n视频：[链接地址](https://www.youtube.com/watch?v=Tci---bVs60&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=12)\n![note11-12.jpg](notes11-12.jpg)\n\n#### Lecture 13:The Normal Distribution\n视频：[链接地址](https://www.youtube.com/watch?v=72QjzHnYvL0&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=13)\n#### Lecture 14:Location, Scale and LOTUS\n视频：[链接地址](https://www.youtube.com/watch?v=9vp1Ll2NpRw&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=14)\n![note13-14.jpg](notes13-14.jpg)","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【Share】GitHub Student Developer Pack 申请学生认证（updating...）","url":"/2020/11/15/share-1/","content":"前几天忘了是从哪里才得知github的学生包（气到吐血，我快毕业了才知道这回事，我得好好反思），于是乎试着申请了一下，官网给出的时间是在1个月内，事实上很快，感觉三天就通过了。\n## 1. 申请过程\n1. 首先是去 https://education.github.com/students 直接点击\"Get benefits for students\"就ok\n![done](./Share-1/开始申请.png)\n![done](./Share-1/填写信息.jpg)\n申请所用邮箱最好是学校的edu邮箱，然后上传含有有效期的学生证件或是证明（最好是英文，我之前上传学生证被拒绝了，然后上传了中英文的在读证明就行了）\n\n2. 如果通过的话会给你发邮件：\n![done](./Share-1/申请完成.png)\n直接点\"Explore offers\"就可以，进去后会发现很多很多很多很多服务（幸福，虽然大部分我还不知道是啥，也不知道咋用嘻嘻）\n\n## 2. 薅羊毛体验\n### 2.1 申请域名服务\n申请完成后迫不及待地打开了Domains的服务，主要是想给自己的网站绑定另一个域名，因为.github.io感觉不太稳定，经常上不去（dbq），然后现在换成.studio啦！！学生包一共提供了三个商家：\n![done](./Share-1/域名服务.jpg)\nNamecheap : 1 year SSL certificate and domain name registration on the .me TLD.\n\nName.com : One free domain name and free Advanced Security (SSL, privacy protection, and more).\n\n.TECH : One standard .TECH domain free for 1 year and 2 free email accounts with 100 MB free storage\n\n经过抉择决定先尝试下Name.com，然后.com是不可能了所以选择了.studio后缀\n\n1. 进去的方法直接点击给出的前个界面的网址，进去后往下拉会有\"Log in with github\"登录后就可以免费选域名啦~\n![done](./Share-1/Namecom.png)\n最后成功的时候会有这个~\n![done](./Share-1/注册完成.png)\n\n2. 在github.io项目中设置一下绑定的域名，具体的方法网上很多，不过在配置SSL证书的时候搞了半天的openssl，生成CSR总是出错，最后一怒之下把vmware卸了个干净，然后新配置了环境变量但是好像还是没用，最后还是进了目录生成的CSR，可算把SSL加进来了（我好累），后面在管理DNS添加解析记录的时候，记得看下面的这句话：\n![done](./Share-1/A记录.png)\nIP地址可以ping ***.github.io（原来的个人博客网址）得到，填写在\"answer\"那一栏就可以了\n\n3. 配置成功后再刷新页面，大功告成~（这竟然花了我一个上午的时间，震怒！）\n![done](./Share-1/网站封面.png)\n\n如果有另外的服务使用会再更新哒，最近实在是太忙了，就先码这么多吧，今天还没看网课，溜了溜了\n\n（updating...）","tags":["Records","Github"],"categories":["Share"]},{"title":"【Stat 110-Probability】Theme 4","url":"/2020/11/11/stat-4/","content":"**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\n资料：[SP&HW](https://projects.iq.harvard.edu/files/stat110/files/strategic_practice_and_homework_4.pdf)\n#### Lecture 9:Expectation,Indicator R.V.,Linearity\n视频：[链接地址](https://www.youtube.com/watch?v=LX2q356N2rU&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=9)\n#### Lecture 10:Expectation Countinued\n视频：[链接地址](https://www.youtube.com/watch?v=P1fSFvhPf7Q&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=10)\n![note9-10.jpg](notes9-10.jpg)","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【英语学习-IELTS】备考雅思感想与总结","url":"/2020/11/06/el-1/","content":"长文预警！！！（不知道要看多久，看着办吧）\n今天刚出的成绩，先上成绩单！！！\n![transcript](./EL-1/成绩单.png)\n对于自己来说已经达到目标分了，6.5我已经很知足了，所以非常开心，决定写个博客来纪念一下备考雅思的全过程。（以下只是个人的备考过程，一点儿也不分享仅供参考哦~）\n\n## 1. 基本介绍\n先介绍下我自己个人的基本情况吧~\n - **四级520，六级459。** 个人的英语的四六级均准备不够充分，都是在考前大概一个星期背背单词然后参加的考试，自己也不知道咋评价自己的英语水平，反正肯定不算好但也不会很差（其实个人认为四六级跟雅思关系并不是很大）\n - **雅思的目标分是6.5。** 我是按均分6.25来给自己定目标的，听力阅读写作口语分别是**6.5 7 6 5.5**,因为自己主要申请港中深，具体的目标肯定还是依据具体学校来定的啦\n - **准备时间大概1个月半月。** 大致从9月初到10月24日，其实我没有仔细计算过时间，现在想想当时其实计划得挺不好的（逃\n - **主要是自学。** 主要是因为我有搭配看一些网课还有蹭一些免费的学习资料啥的，整体感觉还可以，我觉得到底是报班还是自学得看自己对成绩的要求，如果觉得自学遇到瓶颈了当然可以考虑报班，如果觉得对目标分有把握的话可以尝试自学\n---\n感想：\n - 到最后的几天真的焦虑到要吐了，因为港校和港中深的项目的这一轮截止日期是11月底，如果考不出来的话只能又等下一轮，真的不想再拖了，如果这次出分失败的话我估计会非常崩溃吧，但还是要振作起来继续学雅思（边哭边学\n - 记得备考过程中还同时在实验室帮忙以及准备申请的材料，半DIY的我真的头都要大了，但是还是感谢自己能坚持下来\n - 雅思确实有运气成分，但是个人认为自身实力肯定还是占大头的，因为我感觉在整个备考过程中，我的英语能力确实提高了一点，光是必背的那些单词或多或少都有点作用，还有被逼的练口语，备考期间说英语的时间比我上大学以来总共说英语的时间还要久\n - 感觉自己还是很幸运的，毕竟是第一次考试，而且也没钱报班学习所以只好依靠自己（哭泣），非常感谢周围鼓励我的朋友和家长（呜呜呜\n - 这次的备考确实准备不够充分，好好反省好好反省...\n\n## 2. 备考过程\n《剑桥雅思真题4-15》当然是必备！！（但其实4 5 6根本没写，最后没时间写了，主要开始拿11-15来模考）还顺带着蹭了好多免费的资料网课app雅思哥的公开课和考满分的模考（dbq\n总费用（大概2800元左右）：\n - 报名费2170元\n - 由于害怕考不过报了下一场结果考过了又退考产生的手续费450元\n - 复印、打印资料以及答题卡blahblah我就算50元左右\n - 考满分大礼包19.9元（dbq其实主要喜欢那个小本本和小计时器\n - 剑雅真题4-15、雅思王听力、顾家北写作书费100元\n - tb写作批改19.9元（其实就批改了一次23333\n - 好像没了\n\n### 2.1 听力\n---\n学习材料：《雅思王听力语料库》\n\n网课：无\n\nAPP：每日英语听力、新东方雅思pro、欧路词典\n\n---\n听力的词汇是去欧路词典背雅思王听力词汇以及807场景词汇汇总\n\n刚开始看知乎上的备考经验所以买来了语料库，但是自己真的没法坚持下去，听了大概两轮3、4、8、11章节后就弃了，前面的正确率在85%左右，词组开始就是75%左右，我觉得语料库因人而异吧，我实在坚持不下去了，我还是选择听真题。（呜呜呜\n\n听力没有去找一些网课，完全就是真题锻炼出来的，用每日英语听力听真题，然后有用新东方雅思pro是因为每日里面剑15没有文本所以就用了它，我觉得精不精听也因人而异，我也坚持不了精听（俺累了），上午一开始听力练习，做完立马对答案然后开始从头到尾听答案句，将所有不懂的同义替换摘抄在笔记本上（不是所有同义替换，只是不懂的），然后在闲暇时间再多听几遍完整的。\n\n听力其实没啥捷径，还是得磨耳朵吧，如果有时间可以拓展一下听力库，但是我没时间所以只有真题听力陪着我（哭了），还有就是也不知道有啥其他可以听的…等等，听歌算吗（逃\n\n### 2.2 阅读\n---\n学习资料：《雅思哥阅读预测机经》\n\n网课：无\n\nAPP：雅思哥、欧路词典\n\n---\n阅读的词汇同样是去欧路词典背刘洪波真经考点词\n\n真题阅读当然也是必备的，一开始我就给自己限时50分钟（那结果必然是超时），后面慢慢就是正好一个小时，然后变成50分钟内做完，我觉得设置50分钟是有道理的，因为考试中还需要填写答题卡（最后统一填答题卡也可以），总之你必须花费一定时间去填写答题卡，给自己预留10分钟还是可以滴，不过我还是建议大家在训练的时候就学会边写边填，比如填空题（再抄一遍单词感觉有点浪费时间，还不如在原文直接先圈出来然后统一写在答题卡上）\n\n计时做完后就开始每道题找答案句，NOTGIVEN就不用了，所以每次做完后文章全是圈圈，但是看起来很有成就感啊！然后我会将错题中不会的同义替换抄在笔记本，除此之外还有题干的所有不认识的单词，没错是题干，连题目都读不懂怎么能做题呢？！（震怒\n\n后面大概是在考前一个星期左右开始复印雅思哥的阅读机经，其实没有期待真的会预测中，只是听说是真实考场的一些回忆题，所以想见识一下题型和难度（命中概率感觉应该还是很低的）\n\n一些小技巧？\n - 题目大部分都是按照文章顺序的，T/F/NG题型的时候，如果在文章看了很久没有找到啥先别忙NG，接着看下一题，如果下一题在文章有对应句出现的话，就在上一题对应地方与下一题对应地方之间找一下有没有这道题消息，没有就NG\n - 匹配题，如果是人名的话，我习惯先把他们在文中出现过的所有地方先圈起来，然后从头到尾挨个匹配（可能是我定位比较快，反正这方法百试不爽，匹配我基本没错过）\n - 关于F还是NG我的方法是，你假设它就是对的，然后看跟原文有没有冲突，如果有，就是F，如果没有就是NG，例如：原文说A是最棒的，题干说A是第二棒的，那我就假设题干说的对啊，A就是第二棒的，那A怎么可能又是最棒的又是第二棒的呢，所以应该是F；同理，题干说A是最漂亮的，那我就假设A是最漂亮，那不冲突，A可以是最棒也可以是最漂亮的，所以是NG，懂我意思吧（不懂就算了，开玩笑哈哈，这只是我的小方法啦，也不知道对不对= 。 =\n\n### 2.3 写作\n---\n学习资料：《顾家北手把手教你雅思写作6.0》《忘了从哪个姐妹那里拿的大作文话题语料》《Simon的小作文+大作文范文》《simon的观点库》\n\n网课：杜仕明老师的网课\n\nAPP：羊驼雅思\n\n---\n我强烈建议如果对写作小分有要求的话最好还是准备久一点！！或者报班？？但本人不知道有啥靠谱的orz\n\n我一开始的打算是2个月备考，前1个月主攻听力和阅读，后1个月主攻写作和口语（但是依然要保证听力和阅读的训练量），事实上是阅读只花了10天左右，口语大概7天吧（哭了），当时一口气打印40张作文纸，最后可能只用了15张左右（小+大），建议还是大作文每个话题（犯罪、环保、媒体、科技、教育、社会、政府、文化艺术旅游等等）都过一遍，小作文每个类型（柱状图、饼图、折线图、混合图、表格、流程图、地图等等）过一遍。\n\n讲真的，这次考试的大作文我偏题了，crime看成了criminals，我先是肯定曝光他们确实有不好的影响，但是不能因此进行限制，具体理由我忘了，但我知道肯定偏了，因为我理解的是罪犯细节（身高 体重 面貌 家庭住址 电话号码啥的），但是题目说是犯罪细节（类似于犯了啥罪？做了些啥？在哪儿？啥时候？被害者是谁？犯人是谁？），我写完才发现自己偏题，这真是太难过了，我望着我工整的笔迹和还差一分钟的就宣告结束的钟，想哭又想笑（抱头痛哭），非常感激我的阅卷人最终给了我6分。\n\n咳咳跑题了，顾老师的书我基本没用过，翻了一下就放到旁边吃灰了（顾老师对不起），我觉得我可能没时间，小作文我直接看simon的（它短啊），我觉得固定的词背下来，学习simon的四段论，效果海星。大作文的话强推杜老师网课，豁然开朗，我觉得很有用，搭配看几篇simon的大作文范文，当然还要搭配simon的观点库以及积累每个话题下固定的一些词伙搭配（我之前忘了从哪位姐妹那里拿来的，好像就是在知乎上认识的，感谢那位不知名姐妹的分享！！），每天坚持练一篇小/大作文，我是在羊驼雅思app上练习的，它有分类整理好真题里面的写作，还有范文提供，感觉还不错，每次写完就看看真题背后的范文或是那上面的范文，小作文我主要总结一下表达，大作文主要看观点和思路。\n\n当然这些只是满足写作6分左右的方法，我觉得只要逻辑清晰，字数足够，不要偏题，当然语法错误要少，拿6分应该不是特别难的事（认真脸）。\n\n### 2.4 口语\n---\n学习资料：《各大机构免费9-12月口语题库+答案》\n\n网课：无\n\nAPP：雅思哥\n\n---\n口语准备卑微至极，毕竟我是一个速成型选手，当我开始准备口语时搜刮了全部我能看到的免费答案，但是我不背，没错我不背，我就看看答案，坚持每天读一遍。\n\npart1我采用的策略是只看题不看任何答案，就用最最最最原始简单的句子回答这个问题，说多三四句就ok，并且一直保持一种自信美丽大方的姿态（尽管内心慌得一批），我还记得考官第一句是hello, where are you from？然后我答I'm from China.（蠢，这不是废话吗？）Oh!（好像突然又记起什么似的）Actually I'm from Shenzhen, an innovative city. Do you know it? 话音刚落我就感觉不妙，我竟然在反问他？？我在想什么？？？？然后考官一脸“你在教我做事？”的表情（对不起我错了）\n\n---\npart2的话我在疯狂串题，我具体忘了我是怎么串的，我只记得50个话题被我压缩的只需要准备13个故事就好了，比如我自己准备的**甘肃旅行**的经历可以用到：\n - 重新联系的老朋友（司机是初中同学）\n - 令人惊讶的相遇（司机竟然是初中同学？）\n - 成功的冒险（司机带我们穿过无人区，好刺激）\n - 汽车旅行（都有司机了肯定是汽车旅行）\n - 迷路的经历（在无人区迷路了）\n - 想再去一次的城市（好像再去敦煌一次啊）\n - 被污染的地方（那边污染很严重blahblah，甘肃人民不要打我，只是强行添上去的）\n - 一张照片（在甘肃拍的，回忆起那段经历）\n\n或者是准备的**年夜饭**可以用到：\n - 国家传统（春节嘛）\n - 享受的晚餐（晚上吃的嘛）\n - 穿最好的衫（新年当然要穿新衣服啊）\n - 贵贵的活动（吃一顿很贵的，要买好多东西）\n - 一群人的快乐时光（聚在一起很快乐）\n\n还有**数学建模**比赛的经历：\n - 领导力强的朋友（xxx是个好队长blahblah）\n - 团队合作\n - 从错误中学习（犯了错误）\n - 很开心认识的人（很开心认识xxx，他是个好队长）\n - 聪明的人（xxx真聪明，他是个好队长）\n - 精力充沛的人（xxx精力充沛，他是个好队长）\n - 乐于助人的人（xxx乐于助人，他是个好队长）\n - 直率的人（xxx很直率，他是个好队长）\n - 忘记重要的事（犯了错误）\n - 获过的奖（最终得奖了，很开心）\n\n所以发挥聪明才智，串起来串起来，把你的心，我的心串一串，串一株幸运草，串一个同心圆~\n\n然而本人part2自信说了不到两分钟被打断了，至今仍不知道为什么= 。 =（我们仍未知道那天考官为什么打断我）但是part3时间明显变长了。\n\n---\npart3我完全没有准备，语感都是part1练出来的，然后顺着part2的内容就实话实说，句子也都用的很简单的不会很复杂，但是整体part3我没有停顿过，基本一直在说。\n\n最后口语5.5还是非常高兴的哈哈哈哈，小分达到要求我就很开心，我觉得我主要是part2没发挥好，可能偏题了，话题是让人放松的地方，结果我说了甘肃那次旅行，被打断后考官直接问了句你上次去哪儿是什么时候，我说是两年前，我觉得可能这个话题应该讨论的是类似于公园啥的会让你感觉放松的地方，而不是旅行（捂脸）。\n\n## 3. 最终结果\n老实说结果还挺出乎意料的，没想到竟然差0.5分还能上7，我一开始给自己定的就是6.5 7 6 5.5，总的来说听力和阅读挺令我意外的，尤其是听力，我对完答案真的觉得自己就是6-6.5的水平了，事实证明答案不一定可靠，我看了好多机构推的答案，对完真的就是6.5的水平，所以还是要相信自己鸭！！主要就是不要被其他的答案影响到你自己\n\n首考6.5真滴很开心，备考过程应该比较经济实惠（毕竟真滴没钱），想想如果没过的话费用再+2170元就好肉疼= 。 =\n\n---\n感想：\n如果之后还要备考的话我一定要提前准备写作和口语，我不想再极限准备part2和part3了，累了（吐血\n\n还有一个考试过程中的感想，我记得我那一场阅读第二篇有点难，当时我看完后不会做题然后就冷汗直冒，当时我就决定先写第三篇，第三篇相比起来比较容易，后面我是极限三分钟选完第二篇的段落匹配题，总的来说应该不亏，我感觉以后如果觉得不妙就果断放弃吧，前面听力的时候也是，我记得有一道匹配题我只听出来了第一个，接着的三个空好像是走神了反正就是没听到，然后当时心态有点受影响不过还是马上开始看后面的题目，当时蒙了还一直试图回忆（你都没听到啊你回忆啥！），后来心想时间宝贵赶紧看后面的题目吧哈哈哈哈\n\n总的来说我感觉时间还是有点紧的，主要是因为太菜了，阅读和写作基本都是掐点完成，写作写完即收卷也不知道自己有没有犯一下低级语法错误，记得考完后还郁闷了好久，觉得肯定要二战了害\n\n最后还是很开心！希望之后的申请道路也能比较顺利（呜呜呜\n\n溜了，继续学习（逃","tags":["IELTS","Thoughts","Records"],"categories":["English Learning"]},{"title":"【Stat 110-Probability】Theme 3","url":"/2020/11/05/stat-3/","content":"**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\n资料：[SP&HW](https://projects.iq.harvard.edu/files/stat110/files/strategic_practice_and_homework_3.pdf)\n#### Lecture 5:Conditional Countinued\n视频：[链接地址](https://www.youtube.com/watch?v=JzDvVgNDxo8&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=5)\n![note5.jpg](notes5.jpg)\n\n#### Lecture 6:Monty Hall,Simpson's Paradox\n视频：[链接地址](https://www.youtube.com/watch?v=fDcjhAKuhqQ&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=6)\n![note6.jpg](notes6.jpg)\n\n#### Lecture 7:Gambler's Ruin and Random Variables\n视频：[链接地址](https://www.youtube.com/watch?v=PNrqCdslGi4&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=7)\n#### Lecture 8:Random Variables and their Distributions\n视频：[链接地址](https://www.youtube.com/watch?v=k2BB0p8byGA&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=8)\n![note7-8.jpg](notes7-8.jpg)","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【Stat 110-Probability】Theme 2","url":"/2020/11/02/stat-2/","content":"**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\n资料：[SP&HW](https://projects.iq.harvard.edu/files/stat110/files/strategic_practice_and_homework_2.pdf)\n#### Lecture 3:Birthday Problem,Properties of Probability\n视频：[链接地址](https://www.youtube.com/watch?v=LZ5Wergp_PA&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=3)\n#### Lecture 4:Conditional Probability\n视频：[链接地址](https://www.youtube.com/watch?v=P7NE4WF8j-Q&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=4)\n![note3-4.jpg](notes3-4.jpg)\n\n","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【Stat 110-Probability】Theme 1","url":"/2020/11/01/stat-1/","content":"**Harvard University,Stat 110,Fall 2011**\n[课程网站链接](https://projects.iq.harvard.edu/stat110/about)\n资料：[SP&HW](https://projects.iq.harvard.edu/files/stat110/files/strategic_practice_and_homework_1.pdf)\n#### Lecture 1:Probability and Counting\n视频：[链接地址](https://www.youtube.com/watch?v=KbB0FjPg0mw&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=1&t=2s)\n#### Lecture 2:Story Proofs,Axioms of Probability\n视频：[链接地址](https://www.youtube.com/watch?v=FJd_1H3rZGg&list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo&index=2)\n![note1-2.jpg](notes1-2.jpg)\n\n","tags":["Notes","Online","Probability","Stat 110"],"categories":["DS"]},{"title":"【数学建模】优化类模型","url":"/2020/09/06/math-model-1/","content":"## 1. 线性规划\n### 1.1 模型描述\n目标函数为线性函数，约束条件为一组线性等式或不等式的规划问题。通式标准型一般为：\n$$\\min _{x} c^{T}x$$\n\n$$s.t. = \\left\\lbrace\n   \\begin{array}{ll} \nAx \\leq b\\newline\nAeq \\cdot x = beq\\newline\nlb \\leq x \\leq ub \n\\end{array} \\right. $$\n\n在MATLAB中的调用函数为：\n$$\\[x,fval\\] = linprog(c,A,b,Aeq,beq,lb,ub,x_{0},OPTIONS)$$\n\n返回待求解向量$x$以及目标函数值$fval$，参数中$x_{0}$是初始值，OPTIONS是控制参数，其余的参数根据标准型可以知道其含有的意义。\n需要注意的是\n1. 调用函数形式默认是求最小化问题$\\min$，如果求最大化问题$\\max$，则可以将函数中的$c$取反为$-c$，将最大化问题转移为最小化问题\n2. 同样地默认形式的不等式符号是$\\leq$，若为$\\geq$则需要两边取反使符号变反，所以$A$与$b$都需要取反。\n\n### 1.2 MATLAB程序演示\nMATLAB中自带有求解该模型最优解的函数，上面一节已提到，下面是一个示例，假设问题为：\n$$\\max z=2x_{1}+3x_{2}-5x_{3}$$\n\n$$s.t. = \\left\\lbrace\n\\begin{array}{rl}\nx_{1}+x_{2}+x_{3}&=&7\\newline\n2x_{1}-5x_{2}+x_{3}&\\geq&10\\newline\nx_{1}+3x_{2}+x_{3}&\\leq&12\\newline\nx_{1},x_{2},x_{3}&\\geq&0\n\\end{array} \\right. $$\n\nMATLAB代码如下：\n```\nc=[2,3,-5];\nA=[-2,5,-1;1,3,1];% 需要将>=号换成<=号，两边取反\nb=[-10;12];\nAeq=[1,1,1];\nbeq=7;\nlb=[0;0;0];\nub=[inf;inf;inf];\nx0=zeros(3,1);\n% 最大化问题转换为最小化，所以c取反\n[x,fval]=linprog(-c,A,b,Aeq,beq,lb,ub,x0)\nvalue=c*x\n```\n运行结果：\n```\nx =\n\n    6.4286\n    0.5714\n         0\n\nfval =\n\n  -14.5714\n\nvalue =\n\n   14.5714\n```\n\n## 2. 非线性规划\n### 2.1 模型描述\n在一组等式或不等式的约束下的最优化问题，其中至少一个为非线性函数，标准型一般为：\n$$\\min f(x)$$\n\n$$s.t. = \\left\\lbrace\n   \\begin{array}{ll} \nAx \\leq b\\newline\nAeq \\cdot x = beq\\newline\nC(x) \\leq 0\\newline \nCeq(x) = 0\\newline\nlb \\leq x \\leq ub \n\\end{array} \\right. $$\n\n$f(x)$为标量函数，$C(x)$和$Ceq(x)$是非线性向量函数。\n在MATLAB中的调用函数为：\n$$\\[x,fval\\]=fmincon(fun,x_{0},A,b,Aeq,beq,lb,ub,nonlcon,options)$$\n\n$fun$是m文件定义的$f(x)$,$nonlcon$是m文件定义的$C(x)$和$Ceq(x)$\n需要注意的默认形式与线性约束一致，都是默认最小化问题，不等式为$\\leq$形式。\n\n### 2.2 MATLAB程序演示\n示例：\n$$\\min f(x)=x_{1}^{2}+x_{2}^{2}+x_{3}^{2}+8$$\n\n$$s.t. = \\left\\lbrace\n\\begin{array}{rl}\nx_{1}^{2}-x_{2}+x_{3}^{2}&\\geq&0\\newline\nx_{1}+x_{2}^{2}+x_{3}^{3}&\\leq&20\\newline\n-x_{1}-x_{2}^{2}+2&=&0\\newline\nx_{2}+2x_{3}^{2}&=&3\\newline\nx_{1},x_{2},x_{3}&\\geq&0\n\\end{array} \\right. $$\n\nMATLAB代码如下：\n$f$函数fun.m:\n```\n% x为待求解向量\nfunction f = fun(x)\nf = x(1)^2+x(2)^2+x(3)^2+8;\nend\n```\n定义了$f(x)$。\n$C(x)$和$Ceq(x)$的定义在nonlcon.m:\n```\nfunction [c,ceq] = nonlcon(x)\nc = [-x(1)^2+x(2)-x(3)^2;x(1)+x(2)^2+x(3)^3-20];% 非线性不等式约束C(x)\nceq = [-x(1)-x(2)^2+2;x(2)+2*x(3)^2-3];         % 非线性等式约束Ceq(x)\nend\n```\n主文件main.m:\n```\nlb=[0;0;0];\nub=[inf;inf;inf];\nx0=zeros(3,1);\n[x,fval]=fmincon('fun',x0,[],[],[],[],lb,ub,'nonlcon')\n```\n执行前需要保证拥有optimization toolbox，不然会报错“函数或变量 'getIpOptions' 无法识别。”添加附加功能即可。\n结果如下：\n```\nx =\n\n    0.5522\n    1.2033\n    0.9478\n\nfval =\n\n   10.6511\n```\n\n## 3. 二次规划\n### 3.1 模型描述\n目标函数为决策变量$x$的二次函数，且约束条件都是线性的，标准型一般为：\n$$\\min \\frac{1}{2}x^{T}Hx+f^{T}x$$\n\n$$s.t. Ax \\leq b$$\n\n其中$H$是实对称矩阵。关于H的确定可以参考二次型及矩阵的标准型相关知识，总体来说便是，$x_{i}x_{j}$与$x_{j}x_{i}$两项计算最终结果是标量，最终的系数是相加后的结果，因为$H$是实对称矩阵所以元素$a_{ij}$和$a_{ji}$的项是$\\frac{系数}{2}$，而平方项的生成只有一种情况，系数即为对称矩阵的对角线元素，标准型前面有$\\frac{1}{2}$，所以矩阵结果还需要再×2生成$H$。\n在MATLAB中的调用函数为：\n$$\\[x,fval\\]=quadprog(H,f,A,b,Aeq,beq,lb,ub,x_{0},options)$$\n\n\n\n### 3.2 MATLAB程序演示\n求解二次规划：\n$$\\min f(x) = 2x_{1}^{2}-4x_{1}x_{2}+4x_{2}^{2}-6x_{1}-3x_{2}$$\n\n$$s.t. = \\left\\lbrace\n\\begin{array}{rl}\nx_{1}+x_{2}&\\leq&3\\newline\n4x_{1}+x_{2}&\\leq&9\\newline\nx_{1},x_{2}&\\geq&0\n\\end{array} \\right. $$\n\nMATLAB程序：\n```\nH=[4,-4;-4,8];\nf=[-6;-3];\nA=[1,1;4,1];\nb=[3;9];\nlb=[0;0];\nub=[inf;inf];\nx0=zeros(2,1);\n[x,fval]=quadprog(H,f,A,b,[],[],lb,ub,x0)\n```\n结果如下：\n```\nx =\n\n    1.9500\n    1.0500\n\nfval =\n\n  -11.0250\n```\n\n## 4. 整数规划\n### 4.1 模型描述\n特殊的线性规划，部分或全部决策变量$x$被限制为整数，标准型也与之前一致。\n在MATLAB中的调用函数为：\n$$\\[x,fval,exitflag\\]=intlinprog(f,intcon,A,b,Aeq,beq,lb,ub,x_{0},options)$$\n\n$f$与线性规划的$c$一致，表示目标函数的系数;返回值多出一个$exitflag$，表示是否存在这么一个整数值;$intcon$为有整数约束的变量位置，例如如果第一个变量限制为整数，则$intcon=[1]$，如果第一个第二个均被限制为整数，则$intcon=[1,2]$。\n\n不再演示。（懒= 。 =）\n\n## 5. 目标规划\n### 5.1 模型描述\n在线性规划基础上为适应多目标决策而发展起来的。\n异同点：\n- 线性规划求的是一组约束条件下的极值，目标规划是多个目标决策，可求得实际的解。\n- 线性规划-最优解，目标规划-满意解。\n- 线性规划中的约束条件重要度是一样的，而目标规划中有主次之分，重要度有优先级，即优先满足什么再满足什么。\n\n正负偏差变量：\n目标值：预先给定的某个目标的期望值\n决策值：选定决策变量后的函数对应值\n正偏差变量：决策值达到目标值部分，为 $d^{+}=\\max \\lbrace d-d_{0},0\\rbrace$\n负偏差变量：决策值未达到目标值部分，为 $d^{-}=-\\min \\lbrace d-d_{0},0\\rbrace$\n决策值不可能既超过目标值又未到达目标值，所以 $d^{+}\\times d^{-}=0$，因为叉乘为0意味着两个向量是平行的。\n\n当目标值确定后，所要做的是尽量靠近目标值，所以目标函数即为一个最小化问题，最小化与目标值的距离，目标函数为:\n$$\\min z=f(d^{+},d^{-})$$\n\n一共有三种形式：\n1. 要求恰好达到目标值。正、负偏差变量均要小：\n$$\\min z=f(d^{+}+d^{-})$$\n\n2. 仅不超过目标值，正偏差变量尽可能小：\n$$\\min z=f(d^{+})$$\n\n3. 仅超过目标值，负偏差变量尽可能小：\n$$\\min z=f(d^{-})$$\n\n拥有优先级顺序的目标规划算法基本上使用序贯式算法求解，用LINGO求解。\n\n### 5.2 基于遗传算法的MATLAB函数\n#### 5.2.1 遗传算法\n根据目标函数构造一个适应度函数，种群中的每个个体即为问题的每个解，理论思想基于进化论，最先开始初始化种群，然后对每个个体（即问题的解）进行评估（计算适应度）、选择（基于适应度选择）、交叉和变异，不断多轮迭代以生成一个适应度最好的个体为最优解，则算法停止。\n#### 5.2.2 MATLAB程序\nMATLAB自带了$gamultiobj$函数来求解多目标优化问题，它是基于遗传算法的，形式为：\n$$\\[x,fval\\] = gamultiobj(fitnessfcn,nvars,A,b,Aeq,beq,lb,ub,options)$$\n\n$fitnessfcn$表示目标函数（适应度函数）,$nvars$表示变量个数。\n下面是一个实例，求解多目标最优化问题：\n$$\\min f_{1}(x_{1},x_{2})=x_{1}^{4}-10x_{1}^{2}+x_{1}x_{2}+x_{2}^{4}-x_{1}^{2}x_{2}^{2}$$\n\n$$\\min f_{2}(x_{1},x_{2})=x_{2}^{4}-x_{1}^{2}x_{2}^{2}+x_{1}^{4}+x_{1}x_{2}$$\n\n$$s.t. = \\left\\lbrace\n\\begin{array}{ll}\n-5\\leq x_{1}\\leq 5\\newline\n-5\\leq x_{2}\\leq 5\\newline\n\\end{array} \\right. $$\n\n适应度函数在fun.m中定义：\n```\nfunction f = fun(x)\nf(1) = x(1)^4 - 10*x(1)^2+x(1)*x(2) + x(2)^4 - (x(1)^2)*(x(2)^2);\nf(2) = x(2)^4 - (x(1)^2)*(x(2)^2) + x(1)^4 + x(1)*x(2);\nend\n```\n主函数main.m：\n```\nfitnessfcn = @fun;\nnvars=2;\nlb=[-5;-5];\nub=[5;5];\noptions = gaoptimset('ParetoFraction',0.3,'PopulationSize',100,'Generations',200,'StallGenLimit',200,'TolFun',1e-100,'PlotFcns',@gaplotpareto);\n[x,fval] = gamultiobj(fitnessfcn,nvars,[],[],[],[],lb,ub,options)\n```\n这里设置的是最优前端个体系数ParetoFraction为0.3，种群大小PopulationSize为100，最大遗传代数Generations为200，停止代数StallGenLimit为200，适应度函数偏差TolFun为1e-100，这里绘制的是第一前端个体的分布情况。（没有理解，之后再好好看遗传算法吧= =）\n\n需要额外添加global optimization toolbox，不然gaoptimset会报错。\n结果如下：\n![ga](./math-model-1/GA-Paretofront.jpg)\n```\nx =\n\n   -0.7068    0.7069\n    2.6718   -1.9767\n    2.6718   -1.9767\n    1.1010   -1.1090\n   -0.7068    0.7069\n    1.0033   -0.8825\n    2.3382   -1.6462\n    2.2078   -1.6127\n    1.5425   -1.3584\n    0.8928   -0.8851\n    1.2533   -1.2192\n    1.6961   -1.1779\n    1.9208   -1.5240\n    2.4265   -1.8077\n    1.3321   -1.1060\n    1.8264   -1.4294\n    1.6293   -1.2674\n    2.0690   -1.4104\n    2.3934   -1.8064\n    0.8211   -0.6350\n    2.3069   -1.6462\n    1.6542   -1.3731\n    1.5056   -1.4106\n    2.4705   -1.8969\n    1.9671   -1.2967\n    1.8732   -1.4172\n    1.4146   -1.2315\n    2.0216   -1.5813\n    2.6195   -1.9283\n    2.1531   -1.5368\n\nfval =\n\n   -5.2460   -0.2500\n  -38.3334   33.0543\n  -38.3334   33.0543\n  -11.8524    0.2702\n   -5.2460   -0.2500\n  -10.1148   -0.0496\n  -36.1025   18.5677\n  -34.4574   14.2848\n  -21.2132    2.5805\n   -8.1357   -0.1656\n  -14.8940    0.8139\n  -24.5568    4.2121\n  -29.3845    7.5102\n  -37.1598   21.7182\n  -16.7445    1.0014\n  -27.4827    5.8762\n  -23.2484    3.2983\n  -31.9596   10.8491\n  -36.8378   20.4479\n   -6.9179   -0.1761\n  -35.7722   17.4465\n  -23.7514    3.6117\n  -20.2049    2.4637\n  -37.4830   23.5512\n  -29.9510    8.7424\n  -28.4455    6.6446\n  -18.4840    1.5276\n  -31.3289    9.5381\n  -38.2733   30.3431\n  -33.5465   12.8101\n```\n\n### 5.3 基于目标获得法的MATLAB函数\n多目标优化问题中基于目标获得法的方法是需要先单独求得每个目标函数最优值，然后再进行计算的，MATLAB中还有$fgoalattain$函数，形式如下：\n$$\\[x,fval\\] = fgoalattain(fun,x_{0},goal,weight,A,b,Aeq,beq,lb,ub,nonlcon,options)$$\n\n$goal$为目标函数分别达到的最优值，$weight$为目标函数之间的权重，一般即为最优值的绝对值，$fun$即为目标函数。\n先分别求出目标函数的最优值：\nfun1.m:\n```\nfunction f = fun1(x)\nf = x(1)^4 - 10*x(1)^2+x(1)*x(2) + x(2)^4 - (x(1)^2)*(x(2)^2);\nend\n```\nfun2.m:\n```\nfunction f = fun2(x)\nf = x(2)^4 - (x(1)^2)*(x(2)^2) + x(1)^4 + x(1)*x(2);\nend\n```\n主函数main.m:\n```\nlb=[-5;-5];\nub=[5;5];\nx0=rand(2,1);\n[x1,fval1]=fmincon('fun1',x0,[],[],[],[],lb,ub,[]);\n[x2,fval2]=fmincon('fun2',x0,[],[],[],[],lb,ub,[]);\n% 以上先求出分别的最优值\ngoal=[fval1,fval2];\nweight=[abs(fval1),abs(fval2)];\n[x,fval]=fgoalattain('fun',goal,weight,x0,[],[],[],[],lb,ub)\n```\n结果如下：\n```\nx =\n\n   -0.7071    0.7071\n\nfval =\n\n   -5.2500   -0.2500\n```\n使用$fgoalattain$获得一组最优解，与之前的基于遗传算法的方法不同，最优解很大程度取决于初始化值$x_{0}$（因为我发现初始化为0后它就不动了= 。 =）\n\n（更新ing）\n","tags":["Notes","Mathematical Modeling","MATLAB","Optimization"],"categories":["DS"]},{"title":"【Ubuntu】MySQL的用户root密码设置问题","url":"/2020/07/20/ubuntu-mysql/","content":"之前需要在ubuntu下安装mysql，按照教程走说是安装的时候会让你设置root的密码，但实际上安装中没有提示的地方，直接就安装成功了，然后也不知道root的密码是什么，试了自己用户密码也不行，于是去网上查了下解决办法，主要是通过先登录一个自带的用户，然后再修改里面root的密码：\n\n通过以下命令下载的mysql：\n```\nsudo apt-get update  #更新软件源\nsudo apt-get install mysql-server  #安装mysql\n```\n然后使用以下命令打开shell界面，但是需要输入密码：\n```\nmysql -u root -p\n```\n一开始不知道怎么修改，上网查阅发现可以在以下文件找到：\n```\nsudo vim /etc/mysql/debian.cnf\n```\n打开后可以看到user和password：\n![debian.cnf](./ubuntu-mysql/debian.cnf.jpg)\n登录的话使用debian-sys-maint用户名先登上去，密码复制一手，**不要改这个文件不要改这个文件不要改这个文件！！！**\n我天真的尝试将user改成root，将password改成其他密码发现没法成功，然后又重新卸载安装了一遍= 。 =\n\n登进去后基本尝试了所有网上的方法：\n\n- 用 SET PASSWORD 命令\n\t- mysql> set password for 用户名@localhost = password('新密码');\n- 用 UPDATE 直接编辑 user 表\n    - update user set password=password('123') where user='root' and host='localhost';\n    - update user set authentication_string=password('123') where user='root';\n- 在shell命令行里修改MySQL用户密码\n\t- mysqladmin -u root -p (oldpwd) password (newpwd)\n\n结果都是不行，最后的解决办法：\n```\nalter user 'root'@'localhost' identified with mysql_native_password by '123';\n```\n\n参考博客：\n<https://www.jianshu.com/p/e99904fb973c>\n","tags":["Records","MySQL","Linux","Ubuntu"],"categories":["CS"]},{"title":"【Git】Git相关使用杂记（updating...）","url":"/2020/07/06/git-1/","content":"前不久刚开始用git跟小伙伴们做一些小项目，不定时更新一下想法和笔记（随便记，很杂）\n\n#### 1. .gitignore和.gitattributes两个文件\nignore用来写需要git忽略的文件名，attributes我是用来改上传到仓库显示的主语言\n ```shell\n // 在ignore中添加这个文件，这个文件在本地可看到，远程看不到\n package-lock.json\n .DS_Store\n */.DS_Store\n .gitignore%  \n ```\n\n ```shell\n // 在attributes中添加这些信息，将html文件全部记为jupyter notebook，将显示出来的“错误”的主语言改成你想要的就行了\n *.html linguist-language=jupyter notebook\n ```\n\n 但是普通创建这些文件可能不行，用git bash来创建：\n ```shell\n touch .gitignore\n ```\n\n .gitignore里写需要忽略的文件即可，可以使用通配符*，之前在push过后想再忽略某些文件，直接改.gitignore不生效，需要执行：\n ```shell\n git rm -r --cached .\n ```\n\n 清除本地的缓存，再重新add.然后commit\n#### 2. 同步仓库操作\n不太敢用在另一个分支上开发，pull到master再合并过来这种方法（翻车过怕自己又忘了），所以索性直接在本地master和远程master操作：\n ```shell\n // 准备上传的时候先把更改内容存入堆栈\n git stash\n // 开始pull，不过有时候pull需要指定远程分支名\n git pull (origin master)\n // 自动合并后应用存储，不敢用pop，会把堆栈中的内容删掉\n git stash apply\n // 再push\n git add .\n git commit -m \"info\"\n git push (origin master)\n ```\n\n#### 3. Git个人Token双重认证\n\n2021年8月份左右Git开始实行双重认证，受影响的范围有命令行访问以及API等等，首先需要创建一个token，然后下载GMC core\n\n```\nbrew tap microsoft/git\nbrew install --cask git-credential-manager-core\n```\n\n如果跳出来登陆界面，密码填写token即可\n\n#### 4. 修改分支名\n\n假设分支名称为oldName，想要修改为 newName\n\n**1. 本地分支重命名(还没有推送到远程)**\n\n```shell\ngit branch -m oldName newName\n```\n\n**2. 远程分支重命名 (已经推送远程-假设本地分支和远程对应分支名称相同)**\n\n1. 重命名远程分支对应的本地分支\n\n```shell\ngit branch -m oldName newName\n```\n\n2. 删除远程分支\n\n```shell\ngit push --delete origin oldName\n```\n\n3. 上传新命名的本地分支\n\n```shell\ngit push origin newName\n```\n\n4. 把修改后的本地分支与远程分支关联\n\n```shell\ngit branch --set-upstream-to origin/newName\n```\n\n#### 5. 删除项目中所有.DS_Store文件\n\n```shell\nfind . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch\n```\n\n#### 6. 删除本地与远程分支\n\n```shell\n# 建议在合并进master后将分支删除\ngit branch -d 本地分支\ngit push --delete origin 远程分支\n```\n\n","tags":["Notes","Git"],"categories":["CS"]},{"title":"【JS】getJSON读取JSON文件产生的数据混乱问题","url":"/2020/07/05/js-1/","content":"最近在用Echarts实现一个动态点击事件，主要是在折线图中点击对应坐标点就能查看这个点的具体信息，然后在实现的时候需要读取json文件中的数据，尝试用getJson方法，因为我是循环读取的会产生数据混乱的问题，去网上查阅了一下，以下是解决方法：\n```\n$.ajaxSettings.async = false;// 同步执行\n\tfor(var i=0;i<20;i++){\n\t\t$.getJSON(url, data, function(data){//具体措施 });\n\t\t//后续代码\n\t}\n\t//主要就是在多个getJSON语句的前面先设置同步执行，在结尾再回复过来\n$.ajaxSettings.async = true;//异步执行\n```\n我的理解是，因为getJSON的操作是异步执行的，你以为通过循环它会乖乖地按顺序读，但其实不是，可能在这层循环还没完的时候就开始下一个工作了，所以结果会有点混乱，通过将它设置为同步执行保证了顺序读，这样结果会准确，恢复异步执行是为了防止干扰到后面的程序\n\n最后是写在js文件中忘记在html中添加jquery.min.js了，我是直接引用了某个CDN，记得要添加：\n```\n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n```\n\n参考博客：\n<https://www.cnblogs.com/wangkongming/archive/2012/11/19/2777725.html>","tags":["Records","JS","Echarts"],"categories":["CS"]}]